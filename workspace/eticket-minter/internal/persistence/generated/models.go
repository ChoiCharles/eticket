// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.22.0

package persistence

import (
	"database/sql"
	"database/sql/driver"
	"fmt"
	"time"
)

type ReservationStatus string

const (
	ReservationStatusCANCEL  ReservationStatus = "CANCEL"
	ReservationStatusSOLDOUT ReservationStatus = "SOLDOUT"
	ReservationStatusMINTED  ReservationStatus = "MINTED"
)

func (e *ReservationStatus) Scan(src interface{}) error {
	switch s := src.(type) {
	case []byte:
		*e = ReservationStatus(s)
	case string:
		*e = ReservationStatus(s)
	default:
		return fmt.Errorf("unsupported scan type for ReservationStatus: %T", src)
	}
	return nil
}

type NullReservationStatus struct {
	ReservationStatus ReservationStatus
	Valid             bool // Valid is true if ReservationStatus is not NULL
}

// Scan implements the Scanner interface.
func (ns *NullReservationStatus) Scan(value interface{}) error {
	if value == nil {
		ns.ReservationStatus, ns.Valid = "", false
		return nil
	}
	ns.Valid = true
	return ns.ReservationStatus.Scan(value)
}

// Value implements the driver Valuer interface.
func (ns NullReservationStatus) Value() (driver.Value, error) {
	if !ns.Valid {
		return nil, nil
	}
	return string(ns.ReservationStatus), nil
}

type BlockSyncLog struct {
	BlockSyncID int32
	LowerBlock  int64
	UpperBlock  int64
	SyncTime    time.Time
}

type NftTicket struct {
	TokenID []byte
	Owner   []byte
}

type PerformanceSchedule struct {
	PerformanceScheduleID int32
	StartDateTime         time.Time
	PerformanceID         int32
}

type Reservation struct {
	ReservationID         int32
	CancellationTime      time.Time
	PaymentAmount         int32
	ReservationTime       time.Time
	Status                ReservationStatus
	PerformanceScheduleID int32
	SeatID                int32
	UserID                int32
}

type User struct {
	ID            int32
	Email         string
	Nickname      string
	Password      string
	Role          string
	Username      string
	WalletAddress sql.NullString
}
