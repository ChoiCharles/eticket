// Code generated - DO NOT EDIT.
// This file is a generated binding and any manual changes will be lost.

package contract

import (
	"errors"
	"math/big"
	"strings"

	ethereum "github.com/ethereum/go-ethereum"
	"github.com/ethereum/go-ethereum/accounts/abi"
	"github.com/ethereum/go-ethereum/accounts/abi/bind"
	"github.com/ethereum/go-ethereum/common"
	"github.com/ethereum/go-ethereum/core/types"
	"github.com/ethereum/go-ethereum/event"
)

// Reference imports to suppress errors if they are not otherwise used.
var (
	_ = errors.New
	_ = big.NewInt
	_ = strings.NewReader
	_ = ethereum.NotFound
	_ = bind.Bind
	_ = common.Big1
	_ = types.BloomLookup
	_ = event.NewSubscription
	_ = abi.ConvertType
)

// ContractMetaData contains all meta data concerning the Contract contract.
var ContractMetaData = &bind.MetaData{
	ABI: "[{\"inputs\":[{\"internalType\":\"string\",\"name\":\"name_\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"symbol_\",\"type\":\"string\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"approved\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"approved\",\"type\":\"bool\"}],\"name\":\"ApprovalForAll\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"getApproved\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint32\",\"name\":\"performanceScheduleId\",\"type\":\"uint32\"}],\"name\":\"getTicketCoverUri\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"getTicketCoverUriWithTokenId\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"}],\"name\":\"isApprovedForAll\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint32\",\"name\":\"performanceScheduleId\",\"type\":\"uint32\"}],\"name\":\"isPerformanceScheduled\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"isTicketExpired\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint32\",\"name\":\"performanceScheduleId\",\"type\":\"uint32\"},{\"internalType\":\"uint32\",\"name\":\"seatId\",\"type\":\"uint32\"}],\"name\":\"isTicketMinted\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint32\",\"name\":\"performanceScheduleId\",\"type\":\"uint32\"},{\"internalType\":\"uint32\",\"name\":\"seatId\",\"type\":\"uint32\"}],\"name\":\"isTicketUsed\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint32\",\"name\":\"performanceScheduleId\",\"type\":\"uint32\"},{\"internalType\":\"uint32\",\"name\":\"seatId\",\"type\":\"uint32\"}],\"name\":\"makeTokenId\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint32\",\"name\":\"performanceScheduleId\",\"type\":\"uint32\"},{\"internalType\":\"uint32\",\"name\":\"seatId\",\"type\":\"uint32\"}],\"name\":\"markTicketAsUsed\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"receipent\",\"type\":\"address\"},{\"internalType\":\"uint32\",\"name\":\"performanceScheduleId\",\"type\":\"uint32\"},{\"internalType\":\"uint32\",\"name\":\"seatId\",\"type\":\"uint32\"}],\"name\":\"mintTicket\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"obtainPerformanceScheduleId\",\"outputs\":[{\"internalType\":\"uint32\",\"name\":\"\",\"type\":\"uint32\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"obtainSeatId\",\"outputs\":[{\"internalType\":\"uint32\",\"name\":\"\",\"type\":\"uint32\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"ownerOf\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"safeTransferFrom\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\"}],\"name\":\"safeTransferFrom\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint32\",\"name\":\"performanceScheduleId\",\"type\":\"uint32\"},{\"internalType\":\"uint256\",\"name\":\"ticketExpirationTime\",\"type\":\"uint256\"},{\"internalType\":\"string\",\"name\":\"ticketCoverUri\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"ticketSpecialContentBaseUrl\",\"type\":\"string\"}],\"name\":\"schedulePerformance\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"approved\",\"type\":\"bool\"}],\"name\":\"setApprovalForAll\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint32\",\"name\":\"performanceScheduleId\",\"type\":\"uint32\"},{\"internalType\":\"string\",\"name\":\"newTicketCoverUri\",\"type\":\"string\"}],\"name\":\"setTicketCoverUri\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint32\",\"name\":\"performanceScheduleId\",\"type\":\"uint32\"},{\"internalType\":\"string\",\"name\":\"newTicketSpecialContentBaseUrl\",\"type\":\"string\"}],\"name\":\"setTicketSpecialContentBaseUrl\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes4\",\"name\":\"interfaceId\",\"type\":\"bytes4\"}],\"name\":\"supportsInterface\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint32\",\"name\":\"performanceScheduleId\",\"type\":\"uint32\"}],\"name\":\"ticketExpirationTimeOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint32\",\"name\":\"performanceScheduleId\",\"type\":\"uint32\"},{\"internalType\":\"uint32\",\"name\":\"seatId\",\"type\":\"uint32\"}],\"name\":\"ticketOwnerOf\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"index\",\"type\":\"uint256\"}],\"name\":\"tokenByIndex\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"index\",\"type\":\"uint256\"}],\"name\":\"tokenOfOwnerByIndex\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"tokenURI\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]",
	Bin: "0x60806040523480156200001157600080fd5b5060405162004a5f38038062004a5f8339818101604052810190620000379190620002e6565b8181620000596200004d6200008760201b60201c565b6200008f60201b60201c565b81600190816200006a9190620005b6565b5080600290816200007c9190620005b6565b50505050506200069d565b600033905090565b60008060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff169050816000806101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055508173ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff167f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e060405160405180910390a35050565b6000604051905090565b600080fd5b600080fd5b600080fd5b600080fd5b6000601f19601f8301169050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b620001bc8262000171565b810181811067ffffffffffffffff82111715620001de57620001dd62000182565b5b80604052505050565b6000620001f362000153565b9050620002018282620001b1565b919050565b600067ffffffffffffffff82111562000224576200022362000182565b5b6200022f8262000171565b9050602081019050919050565b60005b838110156200025c5780820151818401526020810190506200023f565b60008484015250505050565b60006200027f620002798462000206565b620001e7565b9050828152602081018484840111156200029e576200029d6200016c565b5b620002ab8482856200023c565b509392505050565b600082601f830112620002cb57620002ca62000167565b5b8151620002dd84826020860162000268565b91505092915050565b600080604083850312156200030057620002ff6200015d565b5b600083015167ffffffffffffffff81111562000321576200032062000162565b5b6200032f85828601620002b3565b925050602083015167ffffffffffffffff81111562000353576200035262000162565b5b6200036185828601620002b3565b9150509250929050565b600081519050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052602260045260246000fd5b60006002820490506001821680620003be57607f821691505b602082108103620003d457620003d362000376565b5b50919050565b60008190508160005260206000209050919050565b60006020601f8301049050919050565b600082821b905092915050565b6000600883026200043e7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff82620003ff565b6200044a8683620003ff565b95508019841693508086168417925050509392505050565b6000819050919050565b6000819050919050565b600062000497620004916200048b8462000462565b6200046c565b62000462565b9050919050565b6000819050919050565b620004b38362000476565b620004cb620004c2826200049e565b8484546200040c565b825550505050565b600090565b620004e2620004d3565b620004ef818484620004a8565b505050565b5b8181101562000517576200050b600082620004d8565b600181019050620004f5565b5050565b601f82111562000566576200053081620003da565b6200053b84620003ef565b810160208510156200054b578190505b620005636200055a85620003ef565b830182620004f4565b50505b505050565b600082821c905092915050565b60006200058b600019846008026200056b565b1980831691505092915050565b6000620005a6838362000578565b9150826002028217905092915050565b620005c1826200036b565b67ffffffffffffffff811115620005dd57620005dc62000182565b5b620005e98254620003a5565b620005f68282856200051b565b600060209050601f8311600181146200062e576000841562000619578287015190505b62000625858262000598565b86555062000695565b601f1984166200063e86620003da565b60005b82811015620006685784890151825560018201915060208501945060208101905062000641565b8683101562000688578489015162000684601f89168262000578565b8355505b6001600288020188555050505b505050505050565b6143b280620006ad6000396000f3fe608060405234801561001057600080fd5b50600436106102115760003560e01c80636352211e11610125578063a846b84b116100ad578063c8d486581161007c578063c8d4865814610694578063d0c8c3dc146106b0578063e985e9c5146106e0578063ef866e0e14610710578063f2fde38b1461074057610211565b8063a846b84b146105e8578063ad5023fb14610618578063b88d4fde14610648578063c87b56dd1461066457610211565b8063715018a6116100f4578063715018a614610556578063824b7e7a146105605780638da5cb5b1461059057806395d89b41146105ae578063a22cb465146105cc57610211565b80636352211e146104965780636eed43a1146104c65780636f074cce146104f657806370a082311461052657610211565b806322f2dc3c116101a85780633910ce65116101775780633910ce65146103e25780633a28ea57146103fe57806342842e0e1461042e5780634f6ccce71461044a5780635fdac1a31461047a57610211565b806322f2dc3c1461034a57806323b872dd1461037a5780632f745c5914610396578063359e8129146103c657610211565b8063095ea7b3116101e4578063095ea7b3146102b057806318160ddd146102cc5780631a428694146102ea578063210f21581461031a57610211565b806301ffc9a71461021657806306acb25f1461024657806306fdde0314610262578063081812fc14610280575b600080fd5b610230600480360381019061022b9190612bec565b61075c565b60405161023d9190612c34565b60405180910390f35b610260600480360381019061025b9190612e07565b6107d6565b005b61026a6108a4565b6040516102779190612f25565b60405180910390f35b61029a60048036038101906102959190612f47565b610936565b6040516102a79190612fb5565b60405180910390f35b6102ca60048036038101906102c59190612ffc565b61097c565b005b6102d4610a93565b6040516102e1919061304b565b60405180910390f35b61030460048036038101906102ff9190613066565b610aa0565b6040516103119190612c34565b60405180910390f35b610334600480360381019061032f9190613066565b610ad7565b604051610341919061304b565b60405180910390f35b610364600480360381019061035f9190613066565b610af4565b6040516103719190612c34565b60405180910390f35b610394600480360381019061038f91906130a6565b610b51565b005b6103b060048036038101906103ab9190612ffc565b610bb1565b6040516103bd919061304b565b60405180910390f35b6103e060048036038101906103db91906130f9565b610c56565b005b6103fc60048036038101906103f79190613155565b610c9b565b005b61041860048036038101906104139190612f47565b610cb3565b60405161042591906131b7565b60405180910390f35b610448600480360381019061044391906130a6565b610cc3565b005b610464600480360381019061045f9190612f47565b610ce3565b604051610471919061304b565b60405180910390f35b610494600480360381019061048f9190613066565b610d54565b005b6104b060048036038101906104ab9190612f47565b610da7565b6040516104bd9190612fb5565b60405180910390f35b6104e060048036038101906104db9190612f47565b610e2d565b6040516104ed91906131b7565b60405180910390f35b610510600480360381019061050b91906131d2565b610e41565b60405161051d919061304b565b60405180910390f35b610540600480360381019061053b91906131ff565b610e5c565b60405161054d919061304b565b60405180910390f35b61055e610f13565b005b61057a600480360381019061057591906131d2565b610f27565b6040516105879190612f25565b60405180910390f35b610598610f42565b6040516105a59190612fb5565b60405180910390f35b6105b6610f6b565b6040516105c39190612f25565b60405180910390f35b6105e660048036038101906105e19190613258565b610ffd565b005b61060260048036038101906105fd9190613066565b611013565b60405161060f9190612fb5565b60405180910390f35b610632600480360381019061062d9190612f47565b61103d565b60405161063f9190612f25565b60405180910390f35b610662600480360381019061065d9190613339565b611066565b005b61067e60048036038101906106799190612f47565b6110c8565b60405161068b9190612f25565b60405180910390f35b6106ae60048036038101906106a991906130f9565b61119d565b005b6106ca60048036038101906106c59190612f47565b6111e2565b6040516106d79190612c34565b60405180910390f35b6106fa60048036038101906106f591906133bc565b611205565b6040516107079190612c34565b60405180910390f35b61072a600480360381019061072591906131d2565b611299565b6040516107379190612c34565b60405180910390f35b61075a600480360381019061075591906131ff565b6112d2565b005b60007f780e9d63000000000000000000000000000000000000000000000000000000007bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916827bffffffffffffffffffffffffffffffffffffffffffffffffffffffff191614806107cf57506107ce82611355565b5b9050919050565b6107de611437565b6000600b60008663ffffffff1663ffffffff16815260200190815260200160002090508060050160009054906101000a900460ff1615610853576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161084a9061346e565b60405180910390fd5b60018160050160006101000a81548160ff0219169083151502179055508381600201819055508281600301908161088a919061369a565b508181600401908161089c919061369a565b505050505050565b6060600180546108b3906134bd565b80601f01602080910402602001604051908101604052809291908181526020018280546108df906134bd565b801561092c5780601f106109015761010080835404028352916020019161092c565b820191906000526020600020905b81548152906001019060200180831161090f57829003601f168201915b5050505050905090565b6000610941826114b5565b6005600083815260200190815260200160002060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff169050919050565b600061098782610da7565b90508073ffffffffffffffffffffffffffffffffffffffff168373ffffffffffffffffffffffffffffffffffffffff16036109f7576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016109ee906137de565b60405180910390fd5b8073ffffffffffffffffffffffffffffffffffffffff16610a16611500565b73ffffffffffffffffffffffffffffffffffffffff161480610a455750610a4481610a3f611500565b611205565b5b610a84576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610a7b90613870565b60405180910390fd5b610a8e8383611508565b505050565b6000600980549050905090565b6000610ab4610aaf8484610ad7565b6114b5565b610abe83836115c1565b60000160009054906101000a900460ff16905092915050565b60008163ffffffff1660208463ffffffff16901b17905092915050565b6000610aff83611641565b6000600b60008563ffffffff1663ffffffff168152602001908152602001600020905060008160000160008563ffffffff1663ffffffff16815260200190815260200160002054141591505092915050565b610b62610b5c611500565b826116b3565b610ba1576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610b9890613902565b60405180910390fd5b610bac838383611748565b505050565b6000610bbc83610e5c565b8210610bfd576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610bf490613994565b60405180910390fd5b600760008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020600083815260200190815260200160002054905092915050565b610c5e611437565b610c6782611641565b80600b60008463ffffffff1663ffffffff1681526020019081526020016000206004019081610c96919061369a565b505050565b610ca3611437565b610cae838383611a41565b505050565b600063ffffffff82169050919050565b610cde83838360405180602001604052806000815250611066565b505050565b6000610ced610a93565b8210610d2e576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610d2590613a26565b60405180910390fd5b60098281548110610d4257610d41613a46565b5b90600052602060002001549050919050565b610d5c611437565b610d6582611641565b610d77610d728383610ad7565b6114b5565b6000610d8383836115c1565b905060018160000160006101000a81548160ff021916908315150217905550505050565b600080610db383611b7a565b9050600073ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff1603610e24576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610e1b90613ac1565b60405180910390fd5b80915050919050565b600063ffffffff602083901c169050919050565b6000610e4c82611641565b610e5582611bb7565b9050919050565b60008073ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff1603610ecc576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610ec390613b53565b60405180910390fd5b600460008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020549050919050565b610f1b611437565b610f256000611be8565b565b6060610f3282611641565b610f3b82611cac565b9050919050565b60008060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16905090565b606060028054610f7a906134bd565b80601f0160208091040260200160405190810160405280929190818152602001828054610fa6906134bd565b8015610ff35780601f10610fc857610100808354040283529160200191610ff3565b820191906000526020600020905b815481529060010190602001808311610fd657829003601f168201915b5050505050905090565b61100f611008611500565b8383611d60565b5050565b6000806110208484610ad7565b905061102b816114b5565b61103481610da7565b91505092915050565b6060600061104a83610e2d565b905061105581611641565b61105e81611cac565b915050919050565b611077611071611500565b836116b3565b6110b6576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016110ad90613902565b60405180910390fd5b6110c284848484611ecc565b50505050565b60606110d3826114b5565b60006110de83610e2d565b905060006110eb84610cb3565b905060006110f983836115c1565b905061110485611f28565b158061111f57508060000160009054906101000a900460ff16155b156111375761112d83611cac565b9350505050611198565b600061114284611f50565b905060008151036111615761115684611cac565b945050505050611198565b806111718463ffffffff16612004565b604051602001611182929190613bfb565b6040516020818303038152906040529450505050505b919050565b6111a5611437565b6111ae82611641565b80600b60008463ffffffff1663ffffffff16815260200190815260200160002060030190816111dd919061369a565b505050565b60006111f56111f083610e2d565b611641565b6111fe82611f28565b9050919050565b6000600660008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060009054906101000a900460ff16905092915050565b6000600b60008363ffffffff1663ffffffff16815260200190815260200160002060050160009054906101000a900460ff169050919050565b6112da611437565b600073ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff1603611349576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161134090613c9c565b60405180910390fd5b61135281611be8565b50565b60007f80ac58cd000000000000000000000000000000000000000000000000000000007bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916827bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916148061142057507f5b5e139f000000000000000000000000000000000000000000000000000000007bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916827bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916145b80611430575061142f826120d2565b5b9050919050565b61143f611500565b73ffffffffffffffffffffffffffffffffffffffff1661145d610f42565b73ffffffffffffffffffffffffffffffffffffffff16146114b3576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016114aa90613d08565b60405180910390fd5b565b6114be8161213c565b6114fd576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016114f490613ac1565b60405180910390fd5b50565b600033905090565b816005600083815260200190815260200160002060006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550808273ffffffffffffffffffffffffffffffffffffffff1661157b83610da7565b73ffffffffffffffffffffffffffffffffffffffff167f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b92560405160405180910390a45050565b600080600b60008563ffffffff1663ffffffff168152602001908152602001600020905060008160000160008563ffffffff1663ffffffff1681526020019081526020016000205490508160010160018261161c9190613d57565b8154811061162d5761162c613a46565b5b906000526020600020019250505092915050565b600b60008263ffffffff1663ffffffff16815260200190815260200160002060050160009054906101000a900460ff166116b0576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016116a790613dfd565b60405180910390fd5b50565b6000806116bf83610da7565b90508073ffffffffffffffffffffffffffffffffffffffff168473ffffffffffffffffffffffffffffffffffffffff16148061170157506117008185611205565b5b8061173f57508373ffffffffffffffffffffffffffffffffffffffff1661172784610936565b73ffffffffffffffffffffffffffffffffffffffff16145b91505092915050565b8273ffffffffffffffffffffffffffffffffffffffff1661176882610da7565b73ffffffffffffffffffffffffffffffffffffffff16146117be576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016117b590613e8f565b60405180910390fd5b600073ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff160361182d576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161182490613f21565b60405180910390fd5b61183a838383600161217d565b8273ffffffffffffffffffffffffffffffffffffffff1661185a82610da7565b73ffffffffffffffffffffffffffffffffffffffff16146118b0576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016118a790613e8f565b60405180910390fd5b6005600082815260200190815260200160002060006101000a81549073ffffffffffffffffffffffffffffffffffffffff02191690556001600460008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020600082825403925050819055506001600460008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008282540192505081905550816003600083815260200190815260200160002060006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550808273ffffffffffffffffffffffffffffffffffffffff168473ffffffffffffffffffffffffffffffffffffffff167fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef60405160405180910390a4611a3c83838360016122db565b505050565b611a4a82611641565b6000600b60008463ffffffff1663ffffffff168152602001908152602001600020905060008160000160008463ffffffff1663ffffffff1681526020019081526020016000205414611ad1576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611ac890613fb3565b60405180910390fd5b6000611add8484610ad7565b9050611ae985826122e1565b816001016040518060200160405280600015158152509080600181540180825580915050600190039060005260206000200160009091909190915060008201518160000160006101000a81548160ff021916908315150217905550505081600101805490508260000160008563ffffffff1663ffffffff168152602001908152602001600020819055505050505050565b60006003600083815260200190815260200160002060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff169050919050565b600080600b60008463ffffffff1663ffffffff16815260200190815260200160002090508060020154915050919050565b60008060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff169050816000806101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055508173ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff167f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e060405160405180910390a35050565b6060600b60008363ffffffff1663ffffffff1681526020019081526020016000206003018054611cdb906134bd565b80601f0160208091040260200160405190810160405280929190818152602001828054611d07906134bd565b8015611d545780601f10611d2957610100808354040283529160200191611d54565b820191906000526020600020905b815481529060010190602001808311611d3757829003601f168201915b50505050509050919050565b8173ffffffffffffffffffffffffffffffffffffffff168373ffffffffffffffffffffffffffffffffffffffff1603611dce576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611dc59061401f565b60405180910390fd5b80600660008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060006101000a81548160ff0219169083151502179055508173ffffffffffffffffffffffffffffffffffffffff168373ffffffffffffffffffffffffffffffffffffffff167f17307eab39ab6107e8899845ad3d59bd9653f200f220920489ca2b5937696c3183604051611ebf9190612c34565b60405180910390a3505050565b611ed7848484611748565b611ee3848484846122ff565b611f22576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611f19906140b1565b60405180910390fd5b50505050565b600080611f3483610e2d565b90506000611f4182611bb7565b90504281111592505050919050565b6060600b60008363ffffffff1663ffffffff1681526020019081526020016000206004018054611f7f906134bd565b80601f0160208091040260200160405190810160405280929190818152602001828054611fab906134bd565b8015611ff85780601f10611fcd57610100808354040283529160200191611ff8565b820191906000526020600020905b815481529060010190602001808311611fdb57829003601f168201915b50505050509050919050565b60606000600161201384612486565b01905060008167ffffffffffffffff81111561203257612031612cdc565b5b6040519080825280601f01601f1916602001820160405280156120645781602001600182028036833780820191505090505b509050600082602001820190505b6001156120c7578080600190039150507f3031323334353637383961626364656600000000000000000000000000000000600a86061a8153600a85816120bb576120ba6140d1565b5b04945060008503612072575b819350505050919050565b60007f01ffc9a7000000000000000000000000000000000000000000000000000000007bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916827bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916149050919050565b60008073ffffffffffffffffffffffffffffffffffffffff1661215e83611b7a565b73ffffffffffffffffffffffffffffffffffffffff1614159050919050565b612189848484846125d9565b60018111156121cd576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016121c490614172565b60405180910390fd5b6000829050600073ffffffffffffffffffffffffffffffffffffffff168573ffffffffffffffffffffffffffffffffffffffff16036122145761220f816125df565b612253565b8373ffffffffffffffffffffffffffffffffffffffff168573ffffffffffffffffffffffffffffffffffffffff1614612252576122518582612628565b5b5b600073ffffffffffffffffffffffffffffffffffffffff168473ffffffffffffffffffffffffffffffffffffffff16036122955761229081612795565b6122d4565b8473ffffffffffffffffffffffffffffffffffffffff168473ffffffffffffffffffffffffffffffffffffffff16146122d3576122d28482612866565b5b5b5050505050565b50505050565b6122fb8282604051806020016040528060008152506128e5565b5050565b60006123208473ffffffffffffffffffffffffffffffffffffffff16612940565b15612479578373ffffffffffffffffffffffffffffffffffffffff1663150b7a02612349611500565b8786866040518563ffffffff1660e01b815260040161236b94939291906141e7565b6020604051808303816000875af19250505080156123a757506040513d601f19601f820116820180604052508101906123a49190614248565b60015b612429573d80600081146123d7576040519150601f19603f3d011682016040523d82523d6000602084013e6123dc565b606091505b506000815103612421576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401612418906140b1565b60405180910390fd5b805181602001fd5b63150b7a0260e01b7bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916817bffffffffffffffffffffffffffffffffffffffffffffffffffffffff19161491505061247e565b600190505b949350505050565b600080600090507a184f03e93ff9f4daa797ed6e38ed64bf6a1f01000000000000000083106124e4577a184f03e93ff9f4daa797ed6e38ed64bf6a1f01000000000000000083816124da576124d96140d1565b5b0492506040810190505b6d04ee2d6d415b85acef81000000008310612521576d04ee2d6d415b85acef81000000008381612517576125166140d1565b5b0492506020810190505b662386f26fc10000831061255057662386f26fc100008381612546576125456140d1565b5b0492506010810190505b6305f5e1008310612579576305f5e100838161256f5761256e6140d1565b5b0492506008810190505b612710831061259e576127108381612594576125936140d1565b5b0492506004810190505b606483106125c157606483816125b7576125b66140d1565b5b0492506002810190505b600a83106125d0576001810190505b80915050919050565b50505050565b600980549050600a600083815260200190815260200160002081905550600981908060018154018082558091505060019003906000526020600020016000909190919091505550565b6000600161263584610e5c565b61263f9190613d57565b9050600060086000848152602001908152602001600020549050818114612724576000600760008673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020600084815260200190815260200160002054905080600760008773ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020600084815260200190815260200160002081905550816008600083815260200190815260200160002081905550505b6008600084815260200190815260200160002060009055600760008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008381526020019081526020016000206000905550505050565b600060016009805490506127a99190613d57565b90506000600a60008481526020019081526020016000205490506000600983815481106127d9576127d8613a46565b5b9060005260206000200154905080600983815481106127fb576127fa613a46565b5b906000526020600020018190555081600a600083815260200190815260200160002081905550600a600085815260200190815260200160002060009055600980548061284a57612849614275565b5b6001900381819060005260206000200160009055905550505050565b600061287183610e5c565b905081600760008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020600083815260200190815260200160002081905550806008600084815260200190815260200160002081905550505050565b6128ef8383612963565b6128fc60008484846122ff565b61293b576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401612932906140b1565b60405180910390fd5b505050565b6000808273ffffffffffffffffffffffffffffffffffffffff163b119050919050565b600073ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff16036129d2576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016129c9906142f0565b60405180910390fd5b6129db8161213c565b15612a1b576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401612a129061435c565b60405180910390fd5b612a2960008383600161217d565b612a328161213c565b15612a72576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401612a699061435c565b60405180910390fd5b6001600460008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008282540192505081905550816003600083815260200190815260200160002060006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550808273ffffffffffffffffffffffffffffffffffffffff16600073ffffffffffffffffffffffffffffffffffffffff167fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef60405160405180910390a4612b7c6000838360016122db565b5050565b6000604051905090565b600080fd5b600080fd5b60007fffffffff0000000000000000000000000000000000000000000000000000000082169050919050565b612bc981612b94565b8114612bd457600080fd5b50565b600081359050612be681612bc0565b92915050565b600060208284031215612c0257612c01612b8a565b5b6000612c1084828501612bd7565b91505092915050565b60008115159050919050565b612c2e81612c19565b82525050565b6000602082019050612c496000830184612c25565b92915050565b600063ffffffff82169050919050565b612c6881612c4f565b8114612c7357600080fd5b50565b600081359050612c8581612c5f565b92915050565b6000819050919050565b612c9e81612c8b565b8114612ca957600080fd5b50565b600081359050612cbb81612c95565b92915050565b600080fd5b600080fd5b6000601f19601f8301169050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b612d1482612ccb565b810181811067ffffffffffffffff82111715612d3357612d32612cdc565b5b80604052505050565b6000612d46612b80565b9050612d528282612d0b565b919050565b600067ffffffffffffffff821115612d7257612d71612cdc565b5b612d7b82612ccb565b9050602081019050919050565b82818337600083830152505050565b6000612daa612da584612d57565b612d3c565b905082815260208101848484011115612dc657612dc5612cc6565b5b612dd1848285612d88565b509392505050565b600082601f830112612dee57612ded612cc1565b5b8135612dfe848260208601612d97565b91505092915050565b60008060008060808587031215612e2157612e20612b8a565b5b6000612e2f87828801612c76565b9450506020612e4087828801612cac565b935050604085013567ffffffffffffffff811115612e6157612e60612b8f565b5b612e6d87828801612dd9565b925050606085013567ffffffffffffffff811115612e8e57612e8d612b8f565b5b612e9a87828801612dd9565b91505092959194509250565b600081519050919050565b600082825260208201905092915050565b60005b83811015612ee0578082015181840152602081019050612ec5565b60008484015250505050565b6000612ef782612ea6565b612f018185612eb1565b9350612f11818560208601612ec2565b612f1a81612ccb565b840191505092915050565b60006020820190508181036000830152612f3f8184612eec565b905092915050565b600060208284031215612f5d57612f5c612b8a565b5b6000612f6b84828501612cac565b91505092915050565b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b6000612f9f82612f74565b9050919050565b612faf81612f94565b82525050565b6000602082019050612fca6000830184612fa6565b92915050565b612fd981612f94565b8114612fe457600080fd5b50565b600081359050612ff681612fd0565b92915050565b6000806040838503121561301357613012612b8a565b5b600061302185828601612fe7565b925050602061303285828601612cac565b9150509250929050565b61304581612c8b565b82525050565b6000602082019050613060600083018461303c565b92915050565b6000806040838503121561307d5761307c612b8a565b5b600061308b85828601612c76565b925050602061309c85828601612c76565b9150509250929050565b6000806000606084860312156130bf576130be612b8a565b5b60006130cd86828701612fe7565b93505060206130de86828701612fe7565b92505060406130ef86828701612cac565b9150509250925092565b600080604083850312156131105761310f612b8a565b5b600061311e85828601612c76565b925050602083013567ffffffffffffffff81111561313f5761313e612b8f565b5b61314b85828601612dd9565b9150509250929050565b60008060006060848603121561316e5761316d612b8a565b5b600061317c86828701612fe7565b935050602061318d86828701612c76565b925050604061319e86828701612c76565b9150509250925092565b6131b181612c4f565b82525050565b60006020820190506131cc60008301846131a8565b92915050565b6000602082840312156131e8576131e7612b8a565b5b60006131f684828501612c76565b91505092915050565b60006020828403121561321557613214612b8a565b5b600061322384828501612fe7565b91505092915050565b61323581612c19565b811461324057600080fd5b50565b6000813590506132528161322c565b92915050565b6000806040838503121561326f5761326e612b8a565b5b600061327d85828601612fe7565b925050602061328e85828601613243565b9150509250929050565b600067ffffffffffffffff8211156132b3576132b2612cdc565b5b6132bc82612ccb565b9050602081019050919050565b60006132dc6132d784613298565b612d3c565b9050828152602081018484840111156132f8576132f7612cc6565b5b613303848285612d88565b509392505050565b600082601f8301126133205761331f612cc1565b5b81356133308482602086016132c9565b91505092915050565b6000806000806080858703121561335357613352612b8a565b5b600061336187828801612fe7565b945050602061337287828801612fe7565b935050604061338387828801612cac565b925050606085013567ffffffffffffffff8111156133a4576133a3612b8f565b5b6133b08782880161330b565b91505092959194509250565b600080604083850312156133d3576133d2612b8a565b5b60006133e185828601612fe7565b92505060206133f285828601612fe7565b9150509250929050565b7f7363686564756c65506572666f726d616e636528293a20706572666f726d616e60008201527f636520616c7265616479207363686564756c65642e0000000000000000000000602082015250565b6000613458603583612eb1565b9150613463826133fc565b604082019050919050565b600060208201905081810360008301526134878161344b565b9050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052602260045260246000fd5b600060028204905060018216806134d557607f821691505b6020821081036134e8576134e761348e565b5b50919050565b60008190508160005260206000209050919050565b60006020601f8301049050919050565b600082821b905092915050565b6000600883026135507fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff82613513565b61355a8683613513565b95508019841693508086168417925050509392505050565b6000819050919050565b600061359761359261358d84612c8b565b613572565b612c8b565b9050919050565b6000819050919050565b6135b18361357c565b6135c56135bd8261359e565b848454613520565b825550505050565b600090565b6135da6135cd565b6135e58184846135a8565b505050565b5b81811015613609576135fe6000826135d2565b6001810190506135eb565b5050565b601f82111561364e5761361f816134ee565b61362884613503565b81016020851015613637578190505b61364b61364385613503565b8301826135ea565b50505b505050565b600082821c905092915050565b600061367160001984600802613653565b1980831691505092915050565b600061368a8383613660565b9150826002028217905092915050565b6136a382612ea6565b67ffffffffffffffff8111156136bc576136bb612cdc565b5b6136c682546134bd565b6136d182828561360d565b600060209050601f83116001811461370457600084156136f2578287015190505b6136fc858261367e565b865550613764565b601f198416613712866134ee565b60005b8281101561373a57848901518255600182019150602085019450602081019050613715565b868310156137575784890151613753601f891682613660565b8355505b6001600288020188555050505b505050505050565b7f4552433732313a20617070726f76616c20746f2063757272656e74206f776e6560008201527f7200000000000000000000000000000000000000000000000000000000000000602082015250565b60006137c8602183612eb1565b91506137d38261376c565b604082019050919050565b600060208201905081810360008301526137f7816137bb565b9050919050565b7f4552433732313a20617070726f76652063616c6c6572206973206e6f7420746f60008201527f6b656e206f776e6572206f7220617070726f76656420666f7220616c6c000000602082015250565b600061385a603d83612eb1565b9150613865826137fe565b604082019050919050565b600060208201905081810360008301526138898161384d565b9050919050565b7f4552433732313a2063616c6c6572206973206e6f7420746f6b656e206f776e6560008201527f72206f7220617070726f76656400000000000000000000000000000000000000602082015250565b60006138ec602d83612eb1565b91506138f782613890565b604082019050919050565b6000602082019050818103600083015261391b816138df565b9050919050565b7f455243373231456e756d657261626c653a206f776e657220696e646578206f7560008201527f74206f6620626f756e6473000000000000000000000000000000000000000000602082015250565b600061397e602b83612eb1565b915061398982613922565b604082019050919050565b600060208201905081810360008301526139ad81613971565b9050919050565b7f455243373231456e756d657261626c653a20676c6f62616c20696e646578206f60008201527f7574206f6620626f756e64730000000000000000000000000000000000000000602082015250565b6000613a10602c83612eb1565b9150613a1b826139b4565b604082019050919050565b60006020820190508181036000830152613a3f81613a03565b9050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b7f4552433732313a20696e76616c696420746f6b656e2049440000000000000000600082015250565b6000613aab601883612eb1565b9150613ab682613a75565b602082019050919050565b60006020820190508181036000830152613ada81613a9e565b9050919050565b7f4552433732313a2061646472657373207a65726f206973206e6f74206120766160008201527f6c6964206f776e65720000000000000000000000000000000000000000000000602082015250565b6000613b3d602983612eb1565b9150613b4882613ae1565b604082019050919050565b60006020820190508181036000830152613b6c81613b30565b9050919050565b600081905092915050565b6000613b8982612ea6565b613b938185613b73565b9350613ba3818560208601612ec2565b80840191505092915050565b7f2e6a736f6e000000000000000000000000000000000000000000000000000000600082015250565b6000613be5600583613b73565b9150613bf082613baf565b600582019050919050565b6000613c078285613b7e565b9150613c138284613b7e565b9150613c1e82613bd8565b91508190509392505050565b7f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206160008201527f6464726573730000000000000000000000000000000000000000000000000000602082015250565b6000613c86602683612eb1565b9150613c9182613c2a565b604082019050919050565b60006020820190508181036000830152613cb581613c79565b9050919050565b7f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e6572600082015250565b6000613cf2602083612eb1565b9150613cfd82613cbc565b602082019050919050565b60006020820190508181036000830152613d2181613ce5565b9050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b6000613d6282612c8b565b9150613d6d83612c8b565b9250828203905081811115613d8557613d84613d28565b5b92915050565b7f5f617373657274506572666f726d616e63655363686564756c65643a2070657260008201527f666f726d616e6365206973206e6f74207363686564756c656400000000000000602082015250565b6000613de7603983612eb1565b9150613df282613d8b565b604082019050919050565b60006020820190508181036000830152613e1681613dda565b9050919050565b7f4552433732313a207472616e736665722066726f6d20696e636f72726563742060008201527f6f776e6572000000000000000000000000000000000000000000000000000000602082015250565b6000613e79602583612eb1565b9150613e8482613e1d565b604082019050919050565b60006020820190508181036000830152613ea881613e6c565b9050919050565b7f4552433732313a207472616e7366657220746f20746865207a65726f2061646460008201527f7265737300000000000000000000000000000000000000000000000000000000602082015250565b6000613f0b602483612eb1565b9150613f1682613eaf565b604082019050919050565b60006020820190508181036000830152613f3a81613efe565b9050919050565b7f5f6d696e745469636b657428293a207469636b65742077617320616c7265616460008201527f79206d696e746564000000000000000000000000000000000000000000000000602082015250565b6000613f9d602883612eb1565b9150613fa882613f41565b604082019050919050565b60006020820190508181036000830152613fcc81613f90565b9050919050565b7f4552433732313a20617070726f766520746f2063616c6c657200000000000000600082015250565b6000614009601983612eb1565b915061401482613fd3565b602082019050919050565b6000602082019050818103600083015261403881613ffc565b9050919050565b7f4552433732313a207472616e7366657220746f206e6f6e20455243373231526560008201527f63656976657220696d706c656d656e7465720000000000000000000000000000602082015250565b600061409b603283612eb1565b91506140a68261403f565b604082019050919050565b600060208201905081810360008301526140ca8161408e565b9050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601260045260246000fd5b7f455243373231456e756d657261626c653a20636f6e736563757469766520747260008201527f616e7366657273206e6f7420737570706f727465640000000000000000000000602082015250565b600061415c603583612eb1565b915061416782614100565b604082019050919050565b6000602082019050818103600083015261418b8161414f565b9050919050565b600081519050919050565b600082825260208201905092915050565b60006141b982614192565b6141c3818561419d565b93506141d3818560208601612ec2565b6141dc81612ccb565b840191505092915050565b60006080820190506141fc6000830187612fa6565b6142096020830186612fa6565b614216604083018561303c565b818103606083015261422881846141ae565b905095945050505050565b60008151905061424281612bc0565b92915050565b60006020828403121561425e5761425d612b8a565b5b600061426c84828501614233565b91505092915050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052603160045260246000fd5b7f4552433732313a206d696e7420746f20746865207a65726f2061646472657373600082015250565b60006142da602083612eb1565b91506142e5826142a4565b602082019050919050565b60006020820190508181036000830152614309816142cd565b9050919050565b7f4552433732313a20746f6b656e20616c7265616479206d696e74656400000000600082015250565b6000614346601c83612eb1565b915061435182614310565b602082019050919050565b6000602082019050818103600083015261437581614339565b905091905056fea2646970667358221220881362c20e4110ae559cad27b336e9a9350672f87c302c2eb9cfb02c571863b064736f6c63430008130033",
}

// ContractABI is the input ABI used to generate the binding from.
// Deprecated: Use ContractMetaData.ABI instead.
var ContractABI = ContractMetaData.ABI

// ContractBin is the compiled bytecode used for deploying new contracts.
// Deprecated: Use ContractMetaData.Bin instead.
var ContractBin = ContractMetaData.Bin

// DeployContract deploys a new Ethereum contract, binding an instance of Contract to it.
func DeployContract(auth *bind.TransactOpts, backend bind.ContractBackend, name_ string, symbol_ string) (common.Address, *types.Transaction, *Contract, error) {
	parsed, err := ContractMetaData.GetAbi()
	if err != nil {
		return common.Address{}, nil, nil, err
	}
	if parsed == nil {
		return common.Address{}, nil, nil, errors.New("GetABI returned nil")
	}

	address, tx, contract, err := bind.DeployContract(auth, *parsed, common.FromHex(ContractBin), backend, name_, symbol_)
	if err != nil {
		return common.Address{}, nil, nil, err
	}
	return address, tx, &Contract{ContractCaller: ContractCaller{contract: contract}, ContractTransactor: ContractTransactor{contract: contract}, ContractFilterer: ContractFilterer{contract: contract}}, nil
}

// Contract is an auto generated Go binding around an Ethereum contract.
type Contract struct {
	ContractCaller     // Read-only binding to the contract
	ContractTransactor // Write-only binding to the contract
	ContractFilterer   // Log filterer for contract events
}

// ContractCaller is an auto generated read-only Go binding around an Ethereum contract.
type ContractCaller struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// ContractTransactor is an auto generated write-only Go binding around an Ethereum contract.
type ContractTransactor struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// ContractFilterer is an auto generated log filtering Go binding around an Ethereum contract events.
type ContractFilterer struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// ContractSession is an auto generated Go binding around an Ethereum contract,
// with pre-set call and transact options.
type ContractSession struct {
	Contract     *Contract         // Generic contract binding to set the session for
	CallOpts     bind.CallOpts     // Call options to use throughout this session
	TransactOpts bind.TransactOpts // Transaction auth options to use throughout this session
}

// ContractCallerSession is an auto generated read-only Go binding around an Ethereum contract,
// with pre-set call options.
type ContractCallerSession struct {
	Contract *ContractCaller // Generic contract caller binding to set the session for
	CallOpts bind.CallOpts   // Call options to use throughout this session
}

// ContractTransactorSession is an auto generated write-only Go binding around an Ethereum contract,
// with pre-set transact options.
type ContractTransactorSession struct {
	Contract     *ContractTransactor // Generic contract transactor binding to set the session for
	TransactOpts bind.TransactOpts   // Transaction auth options to use throughout this session
}

// ContractRaw is an auto generated low-level Go binding around an Ethereum contract.
type ContractRaw struct {
	Contract *Contract // Generic contract binding to access the raw methods on
}

// ContractCallerRaw is an auto generated low-level read-only Go binding around an Ethereum contract.
type ContractCallerRaw struct {
	Contract *ContractCaller // Generic read-only contract binding to access the raw methods on
}

// ContractTransactorRaw is an auto generated low-level write-only Go binding around an Ethereum contract.
type ContractTransactorRaw struct {
	Contract *ContractTransactor // Generic write-only contract binding to access the raw methods on
}

// NewContract creates a new instance of Contract, bound to a specific deployed contract.
func NewContract(address common.Address, backend bind.ContractBackend) (*Contract, error) {
	contract, err := bindContract(address, backend, backend, backend)
	if err != nil {
		return nil, err
	}
	return &Contract{ContractCaller: ContractCaller{contract: contract}, ContractTransactor: ContractTransactor{contract: contract}, ContractFilterer: ContractFilterer{contract: contract}}, nil
}

// NewContractCaller creates a new read-only instance of Contract, bound to a specific deployed contract.
func NewContractCaller(address common.Address, caller bind.ContractCaller) (*ContractCaller, error) {
	contract, err := bindContract(address, caller, nil, nil)
	if err != nil {
		return nil, err
	}
	return &ContractCaller{contract: contract}, nil
}

// NewContractTransactor creates a new write-only instance of Contract, bound to a specific deployed contract.
func NewContractTransactor(address common.Address, transactor bind.ContractTransactor) (*ContractTransactor, error) {
	contract, err := bindContract(address, nil, transactor, nil)
	if err != nil {
		return nil, err
	}
	return &ContractTransactor{contract: contract}, nil
}

// NewContractFilterer creates a new log filterer instance of Contract, bound to a specific deployed contract.
func NewContractFilterer(address common.Address, filterer bind.ContractFilterer) (*ContractFilterer, error) {
	contract, err := bindContract(address, nil, nil, filterer)
	if err != nil {
		return nil, err
	}
	return &ContractFilterer{contract: contract}, nil
}

// bindContract binds a generic wrapper to an already deployed contract.
func bindContract(address common.Address, caller bind.ContractCaller, transactor bind.ContractTransactor, filterer bind.ContractFilterer) (*bind.BoundContract, error) {
	parsed, err := ContractMetaData.GetAbi()
	if err != nil {
		return nil, err
	}
	return bind.NewBoundContract(address, *parsed, caller, transactor, filterer), nil
}

// Call invokes the (constant) contract method with params as input values and
// sets the output to result. The result type might be a single field for simple
// returns, a slice of interfaces for anonymous returns and a struct for named
// returns.
func (_Contract *ContractRaw) Call(opts *bind.CallOpts, result *[]interface{}, method string, params ...interface{}) error {
	return _Contract.Contract.ContractCaller.contract.Call(opts, result, method, params...)
}

// Transfer initiates a plain transaction to move funds to the contract, calling
// its default method if one is available.
func (_Contract *ContractRaw) Transfer(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _Contract.Contract.ContractTransactor.contract.Transfer(opts)
}

// Transact invokes the (paid) contract method with params as input values.
func (_Contract *ContractRaw) Transact(opts *bind.TransactOpts, method string, params ...interface{}) (*types.Transaction, error) {
	return _Contract.Contract.ContractTransactor.contract.Transact(opts, method, params...)
}

// Call invokes the (constant) contract method with params as input values and
// sets the output to result. The result type might be a single field for simple
// returns, a slice of interfaces for anonymous returns and a struct for named
// returns.
func (_Contract *ContractCallerRaw) Call(opts *bind.CallOpts, result *[]interface{}, method string, params ...interface{}) error {
	return _Contract.Contract.contract.Call(opts, result, method, params...)
}

// Transfer initiates a plain transaction to move funds to the contract, calling
// its default method if one is available.
func (_Contract *ContractTransactorRaw) Transfer(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _Contract.Contract.contract.Transfer(opts)
}

// Transact invokes the (paid) contract method with params as input values.
func (_Contract *ContractTransactorRaw) Transact(opts *bind.TransactOpts, method string, params ...interface{}) (*types.Transaction, error) {
	return _Contract.Contract.contract.Transact(opts, method, params...)
}

// BalanceOf is a free data retrieval call binding the contract method 0x70a08231.
//
// Solidity: function balanceOf(address owner) view returns(uint256)
func (_Contract *ContractCaller) BalanceOf(opts *bind.CallOpts, owner common.Address) (*big.Int, error) {
	var out []interface{}
	err := _Contract.contract.Call(opts, &out, "balanceOf", owner)

	if err != nil {
		return *new(*big.Int), err
	}

	out0 := *abi.ConvertType(out[0], new(*big.Int)).(**big.Int)

	return out0, err

}

// BalanceOf is a free data retrieval call binding the contract method 0x70a08231.
//
// Solidity: function balanceOf(address owner) view returns(uint256)
func (_Contract *ContractSession) BalanceOf(owner common.Address) (*big.Int, error) {
	return _Contract.Contract.BalanceOf(&_Contract.CallOpts, owner)
}

// BalanceOf is a free data retrieval call binding the contract method 0x70a08231.
//
// Solidity: function balanceOf(address owner) view returns(uint256)
func (_Contract *ContractCallerSession) BalanceOf(owner common.Address) (*big.Int, error) {
	return _Contract.Contract.BalanceOf(&_Contract.CallOpts, owner)
}

// GetApproved is a free data retrieval call binding the contract method 0x081812fc.
//
// Solidity: function getApproved(uint256 tokenId) view returns(address)
func (_Contract *ContractCaller) GetApproved(opts *bind.CallOpts, tokenId *big.Int) (common.Address, error) {
	var out []interface{}
	err := _Contract.contract.Call(opts, &out, "getApproved", tokenId)

	if err != nil {
		return *new(common.Address), err
	}

	out0 := *abi.ConvertType(out[0], new(common.Address)).(*common.Address)

	return out0, err

}

// GetApproved is a free data retrieval call binding the contract method 0x081812fc.
//
// Solidity: function getApproved(uint256 tokenId) view returns(address)
func (_Contract *ContractSession) GetApproved(tokenId *big.Int) (common.Address, error) {
	return _Contract.Contract.GetApproved(&_Contract.CallOpts, tokenId)
}

// GetApproved is a free data retrieval call binding the contract method 0x081812fc.
//
// Solidity: function getApproved(uint256 tokenId) view returns(address)
func (_Contract *ContractCallerSession) GetApproved(tokenId *big.Int) (common.Address, error) {
	return _Contract.Contract.GetApproved(&_Contract.CallOpts, tokenId)
}

// GetTicketCoverUri is a free data retrieval call binding the contract method 0x824b7e7a.
//
// Solidity: function getTicketCoverUri(uint32 performanceScheduleId) view returns(string)
func (_Contract *ContractCaller) GetTicketCoverUri(opts *bind.CallOpts, performanceScheduleId uint32) (string, error) {
	var out []interface{}
	err := _Contract.contract.Call(opts, &out, "getTicketCoverUri", performanceScheduleId)

	if err != nil {
		return *new(string), err
	}

	out0 := *abi.ConvertType(out[0], new(string)).(*string)

	return out0, err

}

// GetTicketCoverUri is a free data retrieval call binding the contract method 0x824b7e7a.
//
// Solidity: function getTicketCoverUri(uint32 performanceScheduleId) view returns(string)
func (_Contract *ContractSession) GetTicketCoverUri(performanceScheduleId uint32) (string, error) {
	return _Contract.Contract.GetTicketCoverUri(&_Contract.CallOpts, performanceScheduleId)
}

// GetTicketCoverUri is a free data retrieval call binding the contract method 0x824b7e7a.
//
// Solidity: function getTicketCoverUri(uint32 performanceScheduleId) view returns(string)
func (_Contract *ContractCallerSession) GetTicketCoverUri(performanceScheduleId uint32) (string, error) {
	return _Contract.Contract.GetTicketCoverUri(&_Contract.CallOpts, performanceScheduleId)
}

// GetTicketCoverUriWithTokenId is a free data retrieval call binding the contract method 0xad5023fb.
//
// Solidity: function getTicketCoverUriWithTokenId(uint256 tokenId) view returns(string)
func (_Contract *ContractCaller) GetTicketCoverUriWithTokenId(opts *bind.CallOpts, tokenId *big.Int) (string, error) {
	var out []interface{}
	err := _Contract.contract.Call(opts, &out, "getTicketCoverUriWithTokenId", tokenId)

	if err != nil {
		return *new(string), err
	}

	out0 := *abi.ConvertType(out[0], new(string)).(*string)

	return out0, err

}

// GetTicketCoverUriWithTokenId is a free data retrieval call binding the contract method 0xad5023fb.
//
// Solidity: function getTicketCoverUriWithTokenId(uint256 tokenId) view returns(string)
func (_Contract *ContractSession) GetTicketCoverUriWithTokenId(tokenId *big.Int) (string, error) {
	return _Contract.Contract.GetTicketCoverUriWithTokenId(&_Contract.CallOpts, tokenId)
}

// GetTicketCoverUriWithTokenId is a free data retrieval call binding the contract method 0xad5023fb.
//
// Solidity: function getTicketCoverUriWithTokenId(uint256 tokenId) view returns(string)
func (_Contract *ContractCallerSession) GetTicketCoverUriWithTokenId(tokenId *big.Int) (string, error) {
	return _Contract.Contract.GetTicketCoverUriWithTokenId(&_Contract.CallOpts, tokenId)
}

// IsApprovedForAll is a free data retrieval call binding the contract method 0xe985e9c5.
//
// Solidity: function isApprovedForAll(address owner, address operator) view returns(bool)
func (_Contract *ContractCaller) IsApprovedForAll(opts *bind.CallOpts, owner common.Address, operator common.Address) (bool, error) {
	var out []interface{}
	err := _Contract.contract.Call(opts, &out, "isApprovedForAll", owner, operator)

	if err != nil {
		return *new(bool), err
	}

	out0 := *abi.ConvertType(out[0], new(bool)).(*bool)

	return out0, err

}

// IsApprovedForAll is a free data retrieval call binding the contract method 0xe985e9c5.
//
// Solidity: function isApprovedForAll(address owner, address operator) view returns(bool)
func (_Contract *ContractSession) IsApprovedForAll(owner common.Address, operator common.Address) (bool, error) {
	return _Contract.Contract.IsApprovedForAll(&_Contract.CallOpts, owner, operator)
}

// IsApprovedForAll is a free data retrieval call binding the contract method 0xe985e9c5.
//
// Solidity: function isApprovedForAll(address owner, address operator) view returns(bool)
func (_Contract *ContractCallerSession) IsApprovedForAll(owner common.Address, operator common.Address) (bool, error) {
	return _Contract.Contract.IsApprovedForAll(&_Contract.CallOpts, owner, operator)
}

// IsPerformanceScheduled is a free data retrieval call binding the contract method 0xef866e0e.
//
// Solidity: function isPerformanceScheduled(uint32 performanceScheduleId) view returns(bool)
func (_Contract *ContractCaller) IsPerformanceScheduled(opts *bind.CallOpts, performanceScheduleId uint32) (bool, error) {
	var out []interface{}
	err := _Contract.contract.Call(opts, &out, "isPerformanceScheduled", performanceScheduleId)

	if err != nil {
		return *new(bool), err
	}

	out0 := *abi.ConvertType(out[0], new(bool)).(*bool)

	return out0, err

}

// IsPerformanceScheduled is a free data retrieval call binding the contract method 0xef866e0e.
//
// Solidity: function isPerformanceScheduled(uint32 performanceScheduleId) view returns(bool)
func (_Contract *ContractSession) IsPerformanceScheduled(performanceScheduleId uint32) (bool, error) {
	return _Contract.Contract.IsPerformanceScheduled(&_Contract.CallOpts, performanceScheduleId)
}

// IsPerformanceScheduled is a free data retrieval call binding the contract method 0xef866e0e.
//
// Solidity: function isPerformanceScheduled(uint32 performanceScheduleId) view returns(bool)
func (_Contract *ContractCallerSession) IsPerformanceScheduled(performanceScheduleId uint32) (bool, error) {
	return _Contract.Contract.IsPerformanceScheduled(&_Contract.CallOpts, performanceScheduleId)
}

// IsTicketExpired is a free data retrieval call binding the contract method 0xd0c8c3dc.
//
// Solidity: function isTicketExpired(uint256 tokenId) view returns(bool)
func (_Contract *ContractCaller) IsTicketExpired(opts *bind.CallOpts, tokenId *big.Int) (bool, error) {
	var out []interface{}
	err := _Contract.contract.Call(opts, &out, "isTicketExpired", tokenId)

	if err != nil {
		return *new(bool), err
	}

	out0 := *abi.ConvertType(out[0], new(bool)).(*bool)

	return out0, err

}

// IsTicketExpired is a free data retrieval call binding the contract method 0xd0c8c3dc.
//
// Solidity: function isTicketExpired(uint256 tokenId) view returns(bool)
func (_Contract *ContractSession) IsTicketExpired(tokenId *big.Int) (bool, error) {
	return _Contract.Contract.IsTicketExpired(&_Contract.CallOpts, tokenId)
}

// IsTicketExpired is a free data retrieval call binding the contract method 0xd0c8c3dc.
//
// Solidity: function isTicketExpired(uint256 tokenId) view returns(bool)
func (_Contract *ContractCallerSession) IsTicketExpired(tokenId *big.Int) (bool, error) {
	return _Contract.Contract.IsTicketExpired(&_Contract.CallOpts, tokenId)
}

// IsTicketMinted is a free data retrieval call binding the contract method 0x22f2dc3c.
//
// Solidity: function isTicketMinted(uint32 performanceScheduleId, uint32 seatId) view returns(bool)
func (_Contract *ContractCaller) IsTicketMinted(opts *bind.CallOpts, performanceScheduleId uint32, seatId uint32) (bool, error) {
	var out []interface{}
	err := _Contract.contract.Call(opts, &out, "isTicketMinted", performanceScheduleId, seatId)

	if err != nil {
		return *new(bool), err
	}

	out0 := *abi.ConvertType(out[0], new(bool)).(*bool)

	return out0, err

}

// IsTicketMinted is a free data retrieval call binding the contract method 0x22f2dc3c.
//
// Solidity: function isTicketMinted(uint32 performanceScheduleId, uint32 seatId) view returns(bool)
func (_Contract *ContractSession) IsTicketMinted(performanceScheduleId uint32, seatId uint32) (bool, error) {
	return _Contract.Contract.IsTicketMinted(&_Contract.CallOpts, performanceScheduleId, seatId)
}

// IsTicketMinted is a free data retrieval call binding the contract method 0x22f2dc3c.
//
// Solidity: function isTicketMinted(uint32 performanceScheduleId, uint32 seatId) view returns(bool)
func (_Contract *ContractCallerSession) IsTicketMinted(performanceScheduleId uint32, seatId uint32) (bool, error) {
	return _Contract.Contract.IsTicketMinted(&_Contract.CallOpts, performanceScheduleId, seatId)
}

// IsTicketUsed is a free data retrieval call binding the contract method 0x1a428694.
//
// Solidity: function isTicketUsed(uint32 performanceScheduleId, uint32 seatId) view returns(bool)
func (_Contract *ContractCaller) IsTicketUsed(opts *bind.CallOpts, performanceScheduleId uint32, seatId uint32) (bool, error) {
	var out []interface{}
	err := _Contract.contract.Call(opts, &out, "isTicketUsed", performanceScheduleId, seatId)

	if err != nil {
		return *new(bool), err
	}

	out0 := *abi.ConvertType(out[0], new(bool)).(*bool)

	return out0, err

}

// IsTicketUsed is a free data retrieval call binding the contract method 0x1a428694.
//
// Solidity: function isTicketUsed(uint32 performanceScheduleId, uint32 seatId) view returns(bool)
func (_Contract *ContractSession) IsTicketUsed(performanceScheduleId uint32, seatId uint32) (bool, error) {
	return _Contract.Contract.IsTicketUsed(&_Contract.CallOpts, performanceScheduleId, seatId)
}

// IsTicketUsed is a free data retrieval call binding the contract method 0x1a428694.
//
// Solidity: function isTicketUsed(uint32 performanceScheduleId, uint32 seatId) view returns(bool)
func (_Contract *ContractCallerSession) IsTicketUsed(performanceScheduleId uint32, seatId uint32) (bool, error) {
	return _Contract.Contract.IsTicketUsed(&_Contract.CallOpts, performanceScheduleId, seatId)
}

// MakeTokenId is a free data retrieval call binding the contract method 0x210f2158.
//
// Solidity: function makeTokenId(uint32 performanceScheduleId, uint32 seatId) pure returns(uint256)
func (_Contract *ContractCaller) MakeTokenId(opts *bind.CallOpts, performanceScheduleId uint32, seatId uint32) (*big.Int, error) {
	var out []interface{}
	err := _Contract.contract.Call(opts, &out, "makeTokenId", performanceScheduleId, seatId)

	if err != nil {
		return *new(*big.Int), err
	}

	out0 := *abi.ConvertType(out[0], new(*big.Int)).(**big.Int)

	return out0, err

}

// MakeTokenId is a free data retrieval call binding the contract method 0x210f2158.
//
// Solidity: function makeTokenId(uint32 performanceScheduleId, uint32 seatId) pure returns(uint256)
func (_Contract *ContractSession) MakeTokenId(performanceScheduleId uint32, seatId uint32) (*big.Int, error) {
	return _Contract.Contract.MakeTokenId(&_Contract.CallOpts, performanceScheduleId, seatId)
}

// MakeTokenId is a free data retrieval call binding the contract method 0x210f2158.
//
// Solidity: function makeTokenId(uint32 performanceScheduleId, uint32 seatId) pure returns(uint256)
func (_Contract *ContractCallerSession) MakeTokenId(performanceScheduleId uint32, seatId uint32) (*big.Int, error) {
	return _Contract.Contract.MakeTokenId(&_Contract.CallOpts, performanceScheduleId, seatId)
}

// Name is a free data retrieval call binding the contract method 0x06fdde03.
//
// Solidity: function name() view returns(string)
func (_Contract *ContractCaller) Name(opts *bind.CallOpts) (string, error) {
	var out []interface{}
	err := _Contract.contract.Call(opts, &out, "name")

	if err != nil {
		return *new(string), err
	}

	out0 := *abi.ConvertType(out[0], new(string)).(*string)

	return out0, err

}

// Name is a free data retrieval call binding the contract method 0x06fdde03.
//
// Solidity: function name() view returns(string)
func (_Contract *ContractSession) Name() (string, error) {
	return _Contract.Contract.Name(&_Contract.CallOpts)
}

// Name is a free data retrieval call binding the contract method 0x06fdde03.
//
// Solidity: function name() view returns(string)
func (_Contract *ContractCallerSession) Name() (string, error) {
	return _Contract.Contract.Name(&_Contract.CallOpts)
}

// ObtainPerformanceScheduleId is a free data retrieval call binding the contract method 0x6eed43a1.
//
// Solidity: function obtainPerformanceScheduleId(uint256 tokenId) pure returns(uint32)
func (_Contract *ContractCaller) ObtainPerformanceScheduleId(opts *bind.CallOpts, tokenId *big.Int) (uint32, error) {
	var out []interface{}
	err := _Contract.contract.Call(opts, &out, "obtainPerformanceScheduleId", tokenId)

	if err != nil {
		return *new(uint32), err
	}

	out0 := *abi.ConvertType(out[0], new(uint32)).(*uint32)

	return out0, err

}

// ObtainPerformanceScheduleId is a free data retrieval call binding the contract method 0x6eed43a1.
//
// Solidity: function obtainPerformanceScheduleId(uint256 tokenId) pure returns(uint32)
func (_Contract *ContractSession) ObtainPerformanceScheduleId(tokenId *big.Int) (uint32, error) {
	return _Contract.Contract.ObtainPerformanceScheduleId(&_Contract.CallOpts, tokenId)
}

// ObtainPerformanceScheduleId is a free data retrieval call binding the contract method 0x6eed43a1.
//
// Solidity: function obtainPerformanceScheduleId(uint256 tokenId) pure returns(uint32)
func (_Contract *ContractCallerSession) ObtainPerformanceScheduleId(tokenId *big.Int) (uint32, error) {
	return _Contract.Contract.ObtainPerformanceScheduleId(&_Contract.CallOpts, tokenId)
}

// ObtainSeatId is a free data retrieval call binding the contract method 0x3a28ea57.
//
// Solidity: function obtainSeatId(uint256 tokenId) pure returns(uint32)
func (_Contract *ContractCaller) ObtainSeatId(opts *bind.CallOpts, tokenId *big.Int) (uint32, error) {
	var out []interface{}
	err := _Contract.contract.Call(opts, &out, "obtainSeatId", tokenId)

	if err != nil {
		return *new(uint32), err
	}

	out0 := *abi.ConvertType(out[0], new(uint32)).(*uint32)

	return out0, err

}

// ObtainSeatId is a free data retrieval call binding the contract method 0x3a28ea57.
//
// Solidity: function obtainSeatId(uint256 tokenId) pure returns(uint32)
func (_Contract *ContractSession) ObtainSeatId(tokenId *big.Int) (uint32, error) {
	return _Contract.Contract.ObtainSeatId(&_Contract.CallOpts, tokenId)
}

// ObtainSeatId is a free data retrieval call binding the contract method 0x3a28ea57.
//
// Solidity: function obtainSeatId(uint256 tokenId) pure returns(uint32)
func (_Contract *ContractCallerSession) ObtainSeatId(tokenId *big.Int) (uint32, error) {
	return _Contract.Contract.ObtainSeatId(&_Contract.CallOpts, tokenId)
}

// Owner is a free data retrieval call binding the contract method 0x8da5cb5b.
//
// Solidity: function owner() view returns(address)
func (_Contract *ContractCaller) Owner(opts *bind.CallOpts) (common.Address, error) {
	var out []interface{}
	err := _Contract.contract.Call(opts, &out, "owner")

	if err != nil {
		return *new(common.Address), err
	}

	out0 := *abi.ConvertType(out[0], new(common.Address)).(*common.Address)

	return out0, err

}

// Owner is a free data retrieval call binding the contract method 0x8da5cb5b.
//
// Solidity: function owner() view returns(address)
func (_Contract *ContractSession) Owner() (common.Address, error) {
	return _Contract.Contract.Owner(&_Contract.CallOpts)
}

// Owner is a free data retrieval call binding the contract method 0x8da5cb5b.
//
// Solidity: function owner() view returns(address)
func (_Contract *ContractCallerSession) Owner() (common.Address, error) {
	return _Contract.Contract.Owner(&_Contract.CallOpts)
}

// OwnerOf is a free data retrieval call binding the contract method 0x6352211e.
//
// Solidity: function ownerOf(uint256 tokenId) view returns(address)
func (_Contract *ContractCaller) OwnerOf(opts *bind.CallOpts, tokenId *big.Int) (common.Address, error) {
	var out []interface{}
	err := _Contract.contract.Call(opts, &out, "ownerOf", tokenId)

	if err != nil {
		return *new(common.Address), err
	}

	out0 := *abi.ConvertType(out[0], new(common.Address)).(*common.Address)

	return out0, err

}

// OwnerOf is a free data retrieval call binding the contract method 0x6352211e.
//
// Solidity: function ownerOf(uint256 tokenId) view returns(address)
func (_Contract *ContractSession) OwnerOf(tokenId *big.Int) (common.Address, error) {
	return _Contract.Contract.OwnerOf(&_Contract.CallOpts, tokenId)
}

// OwnerOf is a free data retrieval call binding the contract method 0x6352211e.
//
// Solidity: function ownerOf(uint256 tokenId) view returns(address)
func (_Contract *ContractCallerSession) OwnerOf(tokenId *big.Int) (common.Address, error) {
	return _Contract.Contract.OwnerOf(&_Contract.CallOpts, tokenId)
}

// SupportsInterface is a free data retrieval call binding the contract method 0x01ffc9a7.
//
// Solidity: function supportsInterface(bytes4 interfaceId) view returns(bool)
func (_Contract *ContractCaller) SupportsInterface(opts *bind.CallOpts, interfaceId [4]byte) (bool, error) {
	var out []interface{}
	err := _Contract.contract.Call(opts, &out, "supportsInterface", interfaceId)

	if err != nil {
		return *new(bool), err
	}

	out0 := *abi.ConvertType(out[0], new(bool)).(*bool)

	return out0, err

}

// SupportsInterface is a free data retrieval call binding the contract method 0x01ffc9a7.
//
// Solidity: function supportsInterface(bytes4 interfaceId) view returns(bool)
func (_Contract *ContractSession) SupportsInterface(interfaceId [4]byte) (bool, error) {
	return _Contract.Contract.SupportsInterface(&_Contract.CallOpts, interfaceId)
}

// SupportsInterface is a free data retrieval call binding the contract method 0x01ffc9a7.
//
// Solidity: function supportsInterface(bytes4 interfaceId) view returns(bool)
func (_Contract *ContractCallerSession) SupportsInterface(interfaceId [4]byte) (bool, error) {
	return _Contract.Contract.SupportsInterface(&_Contract.CallOpts, interfaceId)
}

// Symbol is a free data retrieval call binding the contract method 0x95d89b41.
//
// Solidity: function symbol() view returns(string)
func (_Contract *ContractCaller) Symbol(opts *bind.CallOpts) (string, error) {
	var out []interface{}
	err := _Contract.contract.Call(opts, &out, "symbol")

	if err != nil {
		return *new(string), err
	}

	out0 := *abi.ConvertType(out[0], new(string)).(*string)

	return out0, err

}

// Symbol is a free data retrieval call binding the contract method 0x95d89b41.
//
// Solidity: function symbol() view returns(string)
func (_Contract *ContractSession) Symbol() (string, error) {
	return _Contract.Contract.Symbol(&_Contract.CallOpts)
}

// Symbol is a free data retrieval call binding the contract method 0x95d89b41.
//
// Solidity: function symbol() view returns(string)
func (_Contract *ContractCallerSession) Symbol() (string, error) {
	return _Contract.Contract.Symbol(&_Contract.CallOpts)
}

// TicketExpirationTimeOf is a free data retrieval call binding the contract method 0x6f074cce.
//
// Solidity: function ticketExpirationTimeOf(uint32 performanceScheduleId) view returns(uint256)
func (_Contract *ContractCaller) TicketExpirationTimeOf(opts *bind.CallOpts, performanceScheduleId uint32) (*big.Int, error) {
	var out []interface{}
	err := _Contract.contract.Call(opts, &out, "ticketExpirationTimeOf", performanceScheduleId)

	if err != nil {
		return *new(*big.Int), err
	}

	out0 := *abi.ConvertType(out[0], new(*big.Int)).(**big.Int)

	return out0, err

}

// TicketExpirationTimeOf is a free data retrieval call binding the contract method 0x6f074cce.
//
// Solidity: function ticketExpirationTimeOf(uint32 performanceScheduleId) view returns(uint256)
func (_Contract *ContractSession) TicketExpirationTimeOf(performanceScheduleId uint32) (*big.Int, error) {
	return _Contract.Contract.TicketExpirationTimeOf(&_Contract.CallOpts, performanceScheduleId)
}

// TicketExpirationTimeOf is a free data retrieval call binding the contract method 0x6f074cce.
//
// Solidity: function ticketExpirationTimeOf(uint32 performanceScheduleId) view returns(uint256)
func (_Contract *ContractCallerSession) TicketExpirationTimeOf(performanceScheduleId uint32) (*big.Int, error) {
	return _Contract.Contract.TicketExpirationTimeOf(&_Contract.CallOpts, performanceScheduleId)
}

// TicketOwnerOf is a free data retrieval call binding the contract method 0xa846b84b.
//
// Solidity: function ticketOwnerOf(uint32 performanceScheduleId, uint32 seatId) view returns(address)
func (_Contract *ContractCaller) TicketOwnerOf(opts *bind.CallOpts, performanceScheduleId uint32, seatId uint32) (common.Address, error) {
	var out []interface{}
	err := _Contract.contract.Call(opts, &out, "ticketOwnerOf", performanceScheduleId, seatId)

	if err != nil {
		return *new(common.Address), err
	}

	out0 := *abi.ConvertType(out[0], new(common.Address)).(*common.Address)

	return out0, err

}

// TicketOwnerOf is a free data retrieval call binding the contract method 0xa846b84b.
//
// Solidity: function ticketOwnerOf(uint32 performanceScheduleId, uint32 seatId) view returns(address)
func (_Contract *ContractSession) TicketOwnerOf(performanceScheduleId uint32, seatId uint32) (common.Address, error) {
	return _Contract.Contract.TicketOwnerOf(&_Contract.CallOpts, performanceScheduleId, seatId)
}

// TicketOwnerOf is a free data retrieval call binding the contract method 0xa846b84b.
//
// Solidity: function ticketOwnerOf(uint32 performanceScheduleId, uint32 seatId) view returns(address)
func (_Contract *ContractCallerSession) TicketOwnerOf(performanceScheduleId uint32, seatId uint32) (common.Address, error) {
	return _Contract.Contract.TicketOwnerOf(&_Contract.CallOpts, performanceScheduleId, seatId)
}

// TokenByIndex is a free data retrieval call binding the contract method 0x4f6ccce7.
//
// Solidity: function tokenByIndex(uint256 index) view returns(uint256)
func (_Contract *ContractCaller) TokenByIndex(opts *bind.CallOpts, index *big.Int) (*big.Int, error) {
	var out []interface{}
	err := _Contract.contract.Call(opts, &out, "tokenByIndex", index)

	if err != nil {
		return *new(*big.Int), err
	}

	out0 := *abi.ConvertType(out[0], new(*big.Int)).(**big.Int)

	return out0, err

}

// TokenByIndex is a free data retrieval call binding the contract method 0x4f6ccce7.
//
// Solidity: function tokenByIndex(uint256 index) view returns(uint256)
func (_Contract *ContractSession) TokenByIndex(index *big.Int) (*big.Int, error) {
	return _Contract.Contract.TokenByIndex(&_Contract.CallOpts, index)
}

// TokenByIndex is a free data retrieval call binding the contract method 0x4f6ccce7.
//
// Solidity: function tokenByIndex(uint256 index) view returns(uint256)
func (_Contract *ContractCallerSession) TokenByIndex(index *big.Int) (*big.Int, error) {
	return _Contract.Contract.TokenByIndex(&_Contract.CallOpts, index)
}

// TokenOfOwnerByIndex is a free data retrieval call binding the contract method 0x2f745c59.
//
// Solidity: function tokenOfOwnerByIndex(address owner, uint256 index) view returns(uint256)
func (_Contract *ContractCaller) TokenOfOwnerByIndex(opts *bind.CallOpts, owner common.Address, index *big.Int) (*big.Int, error) {
	var out []interface{}
	err := _Contract.contract.Call(opts, &out, "tokenOfOwnerByIndex", owner, index)

	if err != nil {
		return *new(*big.Int), err
	}

	out0 := *abi.ConvertType(out[0], new(*big.Int)).(**big.Int)

	return out0, err

}

// TokenOfOwnerByIndex is a free data retrieval call binding the contract method 0x2f745c59.
//
// Solidity: function tokenOfOwnerByIndex(address owner, uint256 index) view returns(uint256)
func (_Contract *ContractSession) TokenOfOwnerByIndex(owner common.Address, index *big.Int) (*big.Int, error) {
	return _Contract.Contract.TokenOfOwnerByIndex(&_Contract.CallOpts, owner, index)
}

// TokenOfOwnerByIndex is a free data retrieval call binding the contract method 0x2f745c59.
//
// Solidity: function tokenOfOwnerByIndex(address owner, uint256 index) view returns(uint256)
func (_Contract *ContractCallerSession) TokenOfOwnerByIndex(owner common.Address, index *big.Int) (*big.Int, error) {
	return _Contract.Contract.TokenOfOwnerByIndex(&_Contract.CallOpts, owner, index)
}

// TokenURI is a free data retrieval call binding the contract method 0xc87b56dd.
//
// Solidity: function tokenURI(uint256 tokenId) view returns(string)
func (_Contract *ContractCaller) TokenURI(opts *bind.CallOpts, tokenId *big.Int) (string, error) {
	var out []interface{}
	err := _Contract.contract.Call(opts, &out, "tokenURI", tokenId)

	if err != nil {
		return *new(string), err
	}

	out0 := *abi.ConvertType(out[0], new(string)).(*string)

	return out0, err

}

// TokenURI is a free data retrieval call binding the contract method 0xc87b56dd.
//
// Solidity: function tokenURI(uint256 tokenId) view returns(string)
func (_Contract *ContractSession) TokenURI(tokenId *big.Int) (string, error) {
	return _Contract.Contract.TokenURI(&_Contract.CallOpts, tokenId)
}

// TokenURI is a free data retrieval call binding the contract method 0xc87b56dd.
//
// Solidity: function tokenURI(uint256 tokenId) view returns(string)
func (_Contract *ContractCallerSession) TokenURI(tokenId *big.Int) (string, error) {
	return _Contract.Contract.TokenURI(&_Contract.CallOpts, tokenId)
}

// TotalSupply is a free data retrieval call binding the contract method 0x18160ddd.
//
// Solidity: function totalSupply() view returns(uint256)
func (_Contract *ContractCaller) TotalSupply(opts *bind.CallOpts) (*big.Int, error) {
	var out []interface{}
	err := _Contract.contract.Call(opts, &out, "totalSupply")

	if err != nil {
		return *new(*big.Int), err
	}

	out0 := *abi.ConvertType(out[0], new(*big.Int)).(**big.Int)

	return out0, err

}

// TotalSupply is a free data retrieval call binding the contract method 0x18160ddd.
//
// Solidity: function totalSupply() view returns(uint256)
func (_Contract *ContractSession) TotalSupply() (*big.Int, error) {
	return _Contract.Contract.TotalSupply(&_Contract.CallOpts)
}

// TotalSupply is a free data retrieval call binding the contract method 0x18160ddd.
//
// Solidity: function totalSupply() view returns(uint256)
func (_Contract *ContractCallerSession) TotalSupply() (*big.Int, error) {
	return _Contract.Contract.TotalSupply(&_Contract.CallOpts)
}

// Approve is a paid mutator transaction binding the contract method 0x095ea7b3.
//
// Solidity: function approve(address to, uint256 tokenId) returns()
func (_Contract *ContractTransactor) Approve(opts *bind.TransactOpts, to common.Address, tokenId *big.Int) (*types.Transaction, error) {
	return _Contract.contract.Transact(opts, "approve", to, tokenId)
}

// Approve is a paid mutator transaction binding the contract method 0x095ea7b3.
//
// Solidity: function approve(address to, uint256 tokenId) returns()
func (_Contract *ContractSession) Approve(to common.Address, tokenId *big.Int) (*types.Transaction, error) {
	return _Contract.Contract.Approve(&_Contract.TransactOpts, to, tokenId)
}

// Approve is a paid mutator transaction binding the contract method 0x095ea7b3.
//
// Solidity: function approve(address to, uint256 tokenId) returns()
func (_Contract *ContractTransactorSession) Approve(to common.Address, tokenId *big.Int) (*types.Transaction, error) {
	return _Contract.Contract.Approve(&_Contract.TransactOpts, to, tokenId)
}

// MarkTicketAsUsed is a paid mutator transaction binding the contract method 0x5fdac1a3.
//
// Solidity: function markTicketAsUsed(uint32 performanceScheduleId, uint32 seatId) returns()
func (_Contract *ContractTransactor) MarkTicketAsUsed(opts *bind.TransactOpts, performanceScheduleId uint32, seatId uint32) (*types.Transaction, error) {
	return _Contract.contract.Transact(opts, "markTicketAsUsed", performanceScheduleId, seatId)
}

// MarkTicketAsUsed is a paid mutator transaction binding the contract method 0x5fdac1a3.
//
// Solidity: function markTicketAsUsed(uint32 performanceScheduleId, uint32 seatId) returns()
func (_Contract *ContractSession) MarkTicketAsUsed(performanceScheduleId uint32, seatId uint32) (*types.Transaction, error) {
	return _Contract.Contract.MarkTicketAsUsed(&_Contract.TransactOpts, performanceScheduleId, seatId)
}

// MarkTicketAsUsed is a paid mutator transaction binding the contract method 0x5fdac1a3.
//
// Solidity: function markTicketAsUsed(uint32 performanceScheduleId, uint32 seatId) returns()
func (_Contract *ContractTransactorSession) MarkTicketAsUsed(performanceScheduleId uint32, seatId uint32) (*types.Transaction, error) {
	return _Contract.Contract.MarkTicketAsUsed(&_Contract.TransactOpts, performanceScheduleId, seatId)
}

// MintTicket is a paid mutator transaction binding the contract method 0x3910ce65.
//
// Solidity: function mintTicket(address receipent, uint32 performanceScheduleId, uint32 seatId) returns()
func (_Contract *ContractTransactor) MintTicket(opts *bind.TransactOpts, receipent common.Address, performanceScheduleId uint32, seatId uint32) (*types.Transaction, error) {
	return _Contract.contract.Transact(opts, "mintTicket", receipent, performanceScheduleId, seatId)
}

// MintTicket is a paid mutator transaction binding the contract method 0x3910ce65.
//
// Solidity: function mintTicket(address receipent, uint32 performanceScheduleId, uint32 seatId) returns()
func (_Contract *ContractSession) MintTicket(receipent common.Address, performanceScheduleId uint32, seatId uint32) (*types.Transaction, error) {
	return _Contract.Contract.MintTicket(&_Contract.TransactOpts, receipent, performanceScheduleId, seatId)
}

// MintTicket is a paid mutator transaction binding the contract method 0x3910ce65.
//
// Solidity: function mintTicket(address receipent, uint32 performanceScheduleId, uint32 seatId) returns()
func (_Contract *ContractTransactorSession) MintTicket(receipent common.Address, performanceScheduleId uint32, seatId uint32) (*types.Transaction, error) {
	return _Contract.Contract.MintTicket(&_Contract.TransactOpts, receipent, performanceScheduleId, seatId)
}

// RenounceOwnership is a paid mutator transaction binding the contract method 0x715018a6.
//
// Solidity: function renounceOwnership() returns()
func (_Contract *ContractTransactor) RenounceOwnership(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _Contract.contract.Transact(opts, "renounceOwnership")
}

// RenounceOwnership is a paid mutator transaction binding the contract method 0x715018a6.
//
// Solidity: function renounceOwnership() returns()
func (_Contract *ContractSession) RenounceOwnership() (*types.Transaction, error) {
	return _Contract.Contract.RenounceOwnership(&_Contract.TransactOpts)
}

// RenounceOwnership is a paid mutator transaction binding the contract method 0x715018a6.
//
// Solidity: function renounceOwnership() returns()
func (_Contract *ContractTransactorSession) RenounceOwnership() (*types.Transaction, error) {
	return _Contract.Contract.RenounceOwnership(&_Contract.TransactOpts)
}

// SafeTransferFrom is a paid mutator transaction binding the contract method 0x42842e0e.
//
// Solidity: function safeTransferFrom(address from, address to, uint256 tokenId) returns()
func (_Contract *ContractTransactor) SafeTransferFrom(opts *bind.TransactOpts, from common.Address, to common.Address, tokenId *big.Int) (*types.Transaction, error) {
	return _Contract.contract.Transact(opts, "safeTransferFrom", from, to, tokenId)
}

// SafeTransferFrom is a paid mutator transaction binding the contract method 0x42842e0e.
//
// Solidity: function safeTransferFrom(address from, address to, uint256 tokenId) returns()
func (_Contract *ContractSession) SafeTransferFrom(from common.Address, to common.Address, tokenId *big.Int) (*types.Transaction, error) {
	return _Contract.Contract.SafeTransferFrom(&_Contract.TransactOpts, from, to, tokenId)
}

// SafeTransferFrom is a paid mutator transaction binding the contract method 0x42842e0e.
//
// Solidity: function safeTransferFrom(address from, address to, uint256 tokenId) returns()
func (_Contract *ContractTransactorSession) SafeTransferFrom(from common.Address, to common.Address, tokenId *big.Int) (*types.Transaction, error) {
	return _Contract.Contract.SafeTransferFrom(&_Contract.TransactOpts, from, to, tokenId)
}

// SafeTransferFrom0 is a paid mutator transaction binding the contract method 0xb88d4fde.
//
// Solidity: function safeTransferFrom(address from, address to, uint256 tokenId, bytes data) returns()
func (_Contract *ContractTransactor) SafeTransferFrom0(opts *bind.TransactOpts, from common.Address, to common.Address, tokenId *big.Int, data []byte) (*types.Transaction, error) {
	return _Contract.contract.Transact(opts, "safeTransferFrom0", from, to, tokenId, data)
}

// SafeTransferFrom0 is a paid mutator transaction binding the contract method 0xb88d4fde.
//
// Solidity: function safeTransferFrom(address from, address to, uint256 tokenId, bytes data) returns()
func (_Contract *ContractSession) SafeTransferFrom0(from common.Address, to common.Address, tokenId *big.Int, data []byte) (*types.Transaction, error) {
	return _Contract.Contract.SafeTransferFrom0(&_Contract.TransactOpts, from, to, tokenId, data)
}

// SafeTransferFrom0 is a paid mutator transaction binding the contract method 0xb88d4fde.
//
// Solidity: function safeTransferFrom(address from, address to, uint256 tokenId, bytes data) returns()
func (_Contract *ContractTransactorSession) SafeTransferFrom0(from common.Address, to common.Address, tokenId *big.Int, data []byte) (*types.Transaction, error) {
	return _Contract.Contract.SafeTransferFrom0(&_Contract.TransactOpts, from, to, tokenId, data)
}

// SchedulePerformance is a paid mutator transaction binding the contract method 0x06acb25f.
//
// Solidity: function schedulePerformance(uint32 performanceScheduleId, uint256 ticketExpirationTime, string ticketCoverUri, string ticketSpecialContentBaseUrl) returns()
func (_Contract *ContractTransactor) SchedulePerformance(opts *bind.TransactOpts, performanceScheduleId uint32, ticketExpirationTime *big.Int, ticketCoverUri string, ticketSpecialContentBaseUrl string) (*types.Transaction, error) {
	return _Contract.contract.Transact(opts, "schedulePerformance", performanceScheduleId, ticketExpirationTime, ticketCoverUri, ticketSpecialContentBaseUrl)
}

// SchedulePerformance is a paid mutator transaction binding the contract method 0x06acb25f.
//
// Solidity: function schedulePerformance(uint32 performanceScheduleId, uint256 ticketExpirationTime, string ticketCoverUri, string ticketSpecialContentBaseUrl) returns()
func (_Contract *ContractSession) SchedulePerformance(performanceScheduleId uint32, ticketExpirationTime *big.Int, ticketCoverUri string, ticketSpecialContentBaseUrl string) (*types.Transaction, error) {
	return _Contract.Contract.SchedulePerformance(&_Contract.TransactOpts, performanceScheduleId, ticketExpirationTime, ticketCoverUri, ticketSpecialContentBaseUrl)
}

// SchedulePerformance is a paid mutator transaction binding the contract method 0x06acb25f.
//
// Solidity: function schedulePerformance(uint32 performanceScheduleId, uint256 ticketExpirationTime, string ticketCoverUri, string ticketSpecialContentBaseUrl) returns()
func (_Contract *ContractTransactorSession) SchedulePerformance(performanceScheduleId uint32, ticketExpirationTime *big.Int, ticketCoverUri string, ticketSpecialContentBaseUrl string) (*types.Transaction, error) {
	return _Contract.Contract.SchedulePerformance(&_Contract.TransactOpts, performanceScheduleId, ticketExpirationTime, ticketCoverUri, ticketSpecialContentBaseUrl)
}

// SetApprovalForAll is a paid mutator transaction binding the contract method 0xa22cb465.
//
// Solidity: function setApprovalForAll(address operator, bool approved) returns()
func (_Contract *ContractTransactor) SetApprovalForAll(opts *bind.TransactOpts, operator common.Address, approved bool) (*types.Transaction, error) {
	return _Contract.contract.Transact(opts, "setApprovalForAll", operator, approved)
}

// SetApprovalForAll is a paid mutator transaction binding the contract method 0xa22cb465.
//
// Solidity: function setApprovalForAll(address operator, bool approved) returns()
func (_Contract *ContractSession) SetApprovalForAll(operator common.Address, approved bool) (*types.Transaction, error) {
	return _Contract.Contract.SetApprovalForAll(&_Contract.TransactOpts, operator, approved)
}

// SetApprovalForAll is a paid mutator transaction binding the contract method 0xa22cb465.
//
// Solidity: function setApprovalForAll(address operator, bool approved) returns()
func (_Contract *ContractTransactorSession) SetApprovalForAll(operator common.Address, approved bool) (*types.Transaction, error) {
	return _Contract.Contract.SetApprovalForAll(&_Contract.TransactOpts, operator, approved)
}

// SetTicketCoverUri is a paid mutator transaction binding the contract method 0xc8d48658.
//
// Solidity: function setTicketCoverUri(uint32 performanceScheduleId, string newTicketCoverUri) returns()
func (_Contract *ContractTransactor) SetTicketCoverUri(opts *bind.TransactOpts, performanceScheduleId uint32, newTicketCoverUri string) (*types.Transaction, error) {
	return _Contract.contract.Transact(opts, "setTicketCoverUri", performanceScheduleId, newTicketCoverUri)
}

// SetTicketCoverUri is a paid mutator transaction binding the contract method 0xc8d48658.
//
// Solidity: function setTicketCoverUri(uint32 performanceScheduleId, string newTicketCoverUri) returns()
func (_Contract *ContractSession) SetTicketCoverUri(performanceScheduleId uint32, newTicketCoverUri string) (*types.Transaction, error) {
	return _Contract.Contract.SetTicketCoverUri(&_Contract.TransactOpts, performanceScheduleId, newTicketCoverUri)
}

// SetTicketCoverUri is a paid mutator transaction binding the contract method 0xc8d48658.
//
// Solidity: function setTicketCoverUri(uint32 performanceScheduleId, string newTicketCoverUri) returns()
func (_Contract *ContractTransactorSession) SetTicketCoverUri(performanceScheduleId uint32, newTicketCoverUri string) (*types.Transaction, error) {
	return _Contract.Contract.SetTicketCoverUri(&_Contract.TransactOpts, performanceScheduleId, newTicketCoverUri)
}

// SetTicketSpecialContentBaseUrl is a paid mutator transaction binding the contract method 0x359e8129.
//
// Solidity: function setTicketSpecialContentBaseUrl(uint32 performanceScheduleId, string newTicketSpecialContentBaseUrl) returns()
func (_Contract *ContractTransactor) SetTicketSpecialContentBaseUrl(opts *bind.TransactOpts, performanceScheduleId uint32, newTicketSpecialContentBaseUrl string) (*types.Transaction, error) {
	return _Contract.contract.Transact(opts, "setTicketSpecialContentBaseUrl", performanceScheduleId, newTicketSpecialContentBaseUrl)
}

// SetTicketSpecialContentBaseUrl is a paid mutator transaction binding the contract method 0x359e8129.
//
// Solidity: function setTicketSpecialContentBaseUrl(uint32 performanceScheduleId, string newTicketSpecialContentBaseUrl) returns()
func (_Contract *ContractSession) SetTicketSpecialContentBaseUrl(performanceScheduleId uint32, newTicketSpecialContentBaseUrl string) (*types.Transaction, error) {
	return _Contract.Contract.SetTicketSpecialContentBaseUrl(&_Contract.TransactOpts, performanceScheduleId, newTicketSpecialContentBaseUrl)
}

// SetTicketSpecialContentBaseUrl is a paid mutator transaction binding the contract method 0x359e8129.
//
// Solidity: function setTicketSpecialContentBaseUrl(uint32 performanceScheduleId, string newTicketSpecialContentBaseUrl) returns()
func (_Contract *ContractTransactorSession) SetTicketSpecialContentBaseUrl(performanceScheduleId uint32, newTicketSpecialContentBaseUrl string) (*types.Transaction, error) {
	return _Contract.Contract.SetTicketSpecialContentBaseUrl(&_Contract.TransactOpts, performanceScheduleId, newTicketSpecialContentBaseUrl)
}

// TransferFrom is a paid mutator transaction binding the contract method 0x23b872dd.
//
// Solidity: function transferFrom(address from, address to, uint256 tokenId) returns()
func (_Contract *ContractTransactor) TransferFrom(opts *bind.TransactOpts, from common.Address, to common.Address, tokenId *big.Int) (*types.Transaction, error) {
	return _Contract.contract.Transact(opts, "transferFrom", from, to, tokenId)
}

// TransferFrom is a paid mutator transaction binding the contract method 0x23b872dd.
//
// Solidity: function transferFrom(address from, address to, uint256 tokenId) returns()
func (_Contract *ContractSession) TransferFrom(from common.Address, to common.Address, tokenId *big.Int) (*types.Transaction, error) {
	return _Contract.Contract.TransferFrom(&_Contract.TransactOpts, from, to, tokenId)
}

// TransferFrom is a paid mutator transaction binding the contract method 0x23b872dd.
//
// Solidity: function transferFrom(address from, address to, uint256 tokenId) returns()
func (_Contract *ContractTransactorSession) TransferFrom(from common.Address, to common.Address, tokenId *big.Int) (*types.Transaction, error) {
	return _Contract.Contract.TransferFrom(&_Contract.TransactOpts, from, to, tokenId)
}

// TransferOwnership is a paid mutator transaction binding the contract method 0xf2fde38b.
//
// Solidity: function transferOwnership(address newOwner) returns()
func (_Contract *ContractTransactor) TransferOwnership(opts *bind.TransactOpts, newOwner common.Address) (*types.Transaction, error) {
	return _Contract.contract.Transact(opts, "transferOwnership", newOwner)
}

// TransferOwnership is a paid mutator transaction binding the contract method 0xf2fde38b.
//
// Solidity: function transferOwnership(address newOwner) returns()
func (_Contract *ContractSession) TransferOwnership(newOwner common.Address) (*types.Transaction, error) {
	return _Contract.Contract.TransferOwnership(&_Contract.TransactOpts, newOwner)
}

// TransferOwnership is a paid mutator transaction binding the contract method 0xf2fde38b.
//
// Solidity: function transferOwnership(address newOwner) returns()
func (_Contract *ContractTransactorSession) TransferOwnership(newOwner common.Address) (*types.Transaction, error) {
	return _Contract.Contract.TransferOwnership(&_Contract.TransactOpts, newOwner)
}

// ContractApprovalIterator is returned from FilterApproval and is used to iterate over the raw logs and unpacked data for Approval events raised by the Contract contract.
type ContractApprovalIterator struct {
	Event *ContractApproval // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *ContractApprovalIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(ContractApproval)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(ContractApproval)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *ContractApprovalIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *ContractApprovalIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// ContractApproval represents a Approval event raised by the Contract contract.
type ContractApproval struct {
	Owner    common.Address
	Approved common.Address
	TokenId  *big.Int
	Raw      types.Log // Blockchain specific contextual infos
}

// FilterApproval is a free log retrieval operation binding the contract event 0x8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b925.
//
// Solidity: event Approval(address indexed owner, address indexed approved, uint256 indexed tokenId)
func (_Contract *ContractFilterer) FilterApproval(opts *bind.FilterOpts, owner []common.Address, approved []common.Address, tokenId []*big.Int) (*ContractApprovalIterator, error) {

	var ownerRule []interface{}
	for _, ownerItem := range owner {
		ownerRule = append(ownerRule, ownerItem)
	}
	var approvedRule []interface{}
	for _, approvedItem := range approved {
		approvedRule = append(approvedRule, approvedItem)
	}
	var tokenIdRule []interface{}
	for _, tokenIdItem := range tokenId {
		tokenIdRule = append(tokenIdRule, tokenIdItem)
	}

	logs, sub, err := _Contract.contract.FilterLogs(opts, "Approval", ownerRule, approvedRule, tokenIdRule)
	if err != nil {
		return nil, err
	}
	return &ContractApprovalIterator{contract: _Contract.contract, event: "Approval", logs: logs, sub: sub}, nil
}

// WatchApproval is a free log subscription operation binding the contract event 0x8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b925.
//
// Solidity: event Approval(address indexed owner, address indexed approved, uint256 indexed tokenId)
func (_Contract *ContractFilterer) WatchApproval(opts *bind.WatchOpts, sink chan<- *ContractApproval, owner []common.Address, approved []common.Address, tokenId []*big.Int) (event.Subscription, error) {

	var ownerRule []interface{}
	for _, ownerItem := range owner {
		ownerRule = append(ownerRule, ownerItem)
	}
	var approvedRule []interface{}
	for _, approvedItem := range approved {
		approvedRule = append(approvedRule, approvedItem)
	}
	var tokenIdRule []interface{}
	for _, tokenIdItem := range tokenId {
		tokenIdRule = append(tokenIdRule, tokenIdItem)
	}

	logs, sub, err := _Contract.contract.WatchLogs(opts, "Approval", ownerRule, approvedRule, tokenIdRule)
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(ContractApproval)
				if err := _Contract.contract.UnpackLog(event, "Approval", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseApproval is a log parse operation binding the contract event 0x8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b925.
//
// Solidity: event Approval(address indexed owner, address indexed approved, uint256 indexed tokenId)
func (_Contract *ContractFilterer) ParseApproval(log types.Log) (*ContractApproval, error) {
	event := new(ContractApproval)
	if err := _Contract.contract.UnpackLog(event, "Approval", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// ContractApprovalForAllIterator is returned from FilterApprovalForAll and is used to iterate over the raw logs and unpacked data for ApprovalForAll events raised by the Contract contract.
type ContractApprovalForAllIterator struct {
	Event *ContractApprovalForAll // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *ContractApprovalForAllIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(ContractApprovalForAll)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(ContractApprovalForAll)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *ContractApprovalForAllIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *ContractApprovalForAllIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// ContractApprovalForAll represents a ApprovalForAll event raised by the Contract contract.
type ContractApprovalForAll struct {
	Owner    common.Address
	Operator common.Address
	Approved bool
	Raw      types.Log // Blockchain specific contextual infos
}

// FilterApprovalForAll is a free log retrieval operation binding the contract event 0x17307eab39ab6107e8899845ad3d59bd9653f200f220920489ca2b5937696c31.
//
// Solidity: event ApprovalForAll(address indexed owner, address indexed operator, bool approved)
func (_Contract *ContractFilterer) FilterApprovalForAll(opts *bind.FilterOpts, owner []common.Address, operator []common.Address) (*ContractApprovalForAllIterator, error) {

	var ownerRule []interface{}
	for _, ownerItem := range owner {
		ownerRule = append(ownerRule, ownerItem)
	}
	var operatorRule []interface{}
	for _, operatorItem := range operator {
		operatorRule = append(operatorRule, operatorItem)
	}

	logs, sub, err := _Contract.contract.FilterLogs(opts, "ApprovalForAll", ownerRule, operatorRule)
	if err != nil {
		return nil, err
	}
	return &ContractApprovalForAllIterator{contract: _Contract.contract, event: "ApprovalForAll", logs: logs, sub: sub}, nil
}

// WatchApprovalForAll is a free log subscription operation binding the contract event 0x17307eab39ab6107e8899845ad3d59bd9653f200f220920489ca2b5937696c31.
//
// Solidity: event ApprovalForAll(address indexed owner, address indexed operator, bool approved)
func (_Contract *ContractFilterer) WatchApprovalForAll(opts *bind.WatchOpts, sink chan<- *ContractApprovalForAll, owner []common.Address, operator []common.Address) (event.Subscription, error) {

	var ownerRule []interface{}
	for _, ownerItem := range owner {
		ownerRule = append(ownerRule, ownerItem)
	}
	var operatorRule []interface{}
	for _, operatorItem := range operator {
		operatorRule = append(operatorRule, operatorItem)
	}

	logs, sub, err := _Contract.contract.WatchLogs(opts, "ApprovalForAll", ownerRule, operatorRule)
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(ContractApprovalForAll)
				if err := _Contract.contract.UnpackLog(event, "ApprovalForAll", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseApprovalForAll is a log parse operation binding the contract event 0x17307eab39ab6107e8899845ad3d59bd9653f200f220920489ca2b5937696c31.
//
// Solidity: event ApprovalForAll(address indexed owner, address indexed operator, bool approved)
func (_Contract *ContractFilterer) ParseApprovalForAll(log types.Log) (*ContractApprovalForAll, error) {
	event := new(ContractApprovalForAll)
	if err := _Contract.contract.UnpackLog(event, "ApprovalForAll", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// ContractOwnershipTransferredIterator is returned from FilterOwnershipTransferred and is used to iterate over the raw logs and unpacked data for OwnershipTransferred events raised by the Contract contract.
type ContractOwnershipTransferredIterator struct {
	Event *ContractOwnershipTransferred // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *ContractOwnershipTransferredIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(ContractOwnershipTransferred)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(ContractOwnershipTransferred)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *ContractOwnershipTransferredIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *ContractOwnershipTransferredIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// ContractOwnershipTransferred represents a OwnershipTransferred event raised by the Contract contract.
type ContractOwnershipTransferred struct {
	PreviousOwner common.Address
	NewOwner      common.Address
	Raw           types.Log // Blockchain specific contextual infos
}

// FilterOwnershipTransferred is a free log retrieval operation binding the contract event 0x8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0.
//
// Solidity: event OwnershipTransferred(address indexed previousOwner, address indexed newOwner)
func (_Contract *ContractFilterer) FilterOwnershipTransferred(opts *bind.FilterOpts, previousOwner []common.Address, newOwner []common.Address) (*ContractOwnershipTransferredIterator, error) {

	var previousOwnerRule []interface{}
	for _, previousOwnerItem := range previousOwner {
		previousOwnerRule = append(previousOwnerRule, previousOwnerItem)
	}
	var newOwnerRule []interface{}
	for _, newOwnerItem := range newOwner {
		newOwnerRule = append(newOwnerRule, newOwnerItem)
	}

	logs, sub, err := _Contract.contract.FilterLogs(opts, "OwnershipTransferred", previousOwnerRule, newOwnerRule)
	if err != nil {
		return nil, err
	}
	return &ContractOwnershipTransferredIterator{contract: _Contract.contract, event: "OwnershipTransferred", logs: logs, sub: sub}, nil
}

// WatchOwnershipTransferred is a free log subscription operation binding the contract event 0x8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0.
//
// Solidity: event OwnershipTransferred(address indexed previousOwner, address indexed newOwner)
func (_Contract *ContractFilterer) WatchOwnershipTransferred(opts *bind.WatchOpts, sink chan<- *ContractOwnershipTransferred, previousOwner []common.Address, newOwner []common.Address) (event.Subscription, error) {

	var previousOwnerRule []interface{}
	for _, previousOwnerItem := range previousOwner {
		previousOwnerRule = append(previousOwnerRule, previousOwnerItem)
	}
	var newOwnerRule []interface{}
	for _, newOwnerItem := range newOwner {
		newOwnerRule = append(newOwnerRule, newOwnerItem)
	}

	logs, sub, err := _Contract.contract.WatchLogs(opts, "OwnershipTransferred", previousOwnerRule, newOwnerRule)
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(ContractOwnershipTransferred)
				if err := _Contract.contract.UnpackLog(event, "OwnershipTransferred", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseOwnershipTransferred is a log parse operation binding the contract event 0x8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0.
//
// Solidity: event OwnershipTransferred(address indexed previousOwner, address indexed newOwner)
func (_Contract *ContractFilterer) ParseOwnershipTransferred(log types.Log) (*ContractOwnershipTransferred, error) {
	event := new(ContractOwnershipTransferred)
	if err := _Contract.contract.UnpackLog(event, "OwnershipTransferred", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// ContractTransferIterator is returned from FilterTransfer and is used to iterate over the raw logs and unpacked data for Transfer events raised by the Contract contract.
type ContractTransferIterator struct {
	Event *ContractTransfer // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *ContractTransferIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(ContractTransfer)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(ContractTransfer)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *ContractTransferIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *ContractTransferIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// ContractTransfer represents a Transfer event raised by the Contract contract.
type ContractTransfer struct {
	From    common.Address
	To      common.Address
	TokenId *big.Int
	Raw     types.Log // Blockchain specific contextual infos
}

// FilterTransfer is a free log retrieval operation binding the contract event 0xddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef.
//
// Solidity: event Transfer(address indexed from, address indexed to, uint256 indexed tokenId)
func (_Contract *ContractFilterer) FilterTransfer(opts *bind.FilterOpts, from []common.Address, to []common.Address, tokenId []*big.Int) (*ContractTransferIterator, error) {

	var fromRule []interface{}
	for _, fromItem := range from {
		fromRule = append(fromRule, fromItem)
	}
	var toRule []interface{}
	for _, toItem := range to {
		toRule = append(toRule, toItem)
	}
	var tokenIdRule []interface{}
	for _, tokenIdItem := range tokenId {
		tokenIdRule = append(tokenIdRule, tokenIdItem)
	}

	logs, sub, err := _Contract.contract.FilterLogs(opts, "Transfer", fromRule, toRule, tokenIdRule)
	if err != nil {
		return nil, err
	}
	return &ContractTransferIterator{contract: _Contract.contract, event: "Transfer", logs: logs, sub: sub}, nil
}

// WatchTransfer is a free log subscription operation binding the contract event 0xddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef.
//
// Solidity: event Transfer(address indexed from, address indexed to, uint256 indexed tokenId)
func (_Contract *ContractFilterer) WatchTransfer(opts *bind.WatchOpts, sink chan<- *ContractTransfer, from []common.Address, to []common.Address, tokenId []*big.Int) (event.Subscription, error) {

	var fromRule []interface{}
	for _, fromItem := range from {
		fromRule = append(fromRule, fromItem)
	}
	var toRule []interface{}
	for _, toItem := range to {
		toRule = append(toRule, toItem)
	}
	var tokenIdRule []interface{}
	for _, tokenIdItem := range tokenId {
		tokenIdRule = append(tokenIdRule, tokenIdItem)
	}

	logs, sub, err := _Contract.contract.WatchLogs(opts, "Transfer", fromRule, toRule, tokenIdRule)
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(ContractTransfer)
				if err := _Contract.contract.UnpackLog(event, "Transfer", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseTransfer is a log parse operation binding the contract event 0xddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef.
//
// Solidity: event Transfer(address indexed from, address indexed to, uint256 indexed tokenId)
func (_Contract *ContractFilterer) ParseTransfer(log types.Log) (*ContractTransfer, error) {
	event := new(ContractTransfer)
	if err := _Contract.contract.UnpackLog(event, "Transfer", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}
