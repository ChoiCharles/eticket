// Code generated - DO NOT EDIT.
// This file is a generated binding and any manual changes will be lost.

package contract

import (
	"errors"
	"math/big"
	"strings"

	ethereum "github.com/ethereum/go-ethereum"
	"github.com/ethereum/go-ethereum/accounts/abi"
	"github.com/ethereum/go-ethereum/accounts/abi/bind"
	"github.com/ethereum/go-ethereum/common"
	"github.com/ethereum/go-ethereum/core/types"
	"github.com/ethereum/go-ethereum/event"
)

// Reference imports to suppress errors if they are not otherwise used.
var (
	_ = errors.New
	_ = big.NewInt
	_ = strings.NewReader
	_ = ethereum.NotFound
	_ = bind.Bind
	_ = common.Big1
	_ = types.BloomLookup
	_ = event.NewSubscription
	_ = abi.ConvertType
)

// ContractMetaData contains all meta data concerning the Contract contract.
var ContractMetaData = &bind.MetaData{
	ABI: "[{\"inputs\":[{\"internalType\":\"string\",\"name\":\"name_\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"symbol_\",\"type\":\"string\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"approved\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"approved\",\"type\":\"bool\"}],\"name\":\"ApprovalForAll\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"getApproved\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint32\",\"name\":\"performanceScheduleId\",\"type\":\"uint32\"}],\"name\":\"getTicketCoverUri\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"getTicketCoverUriWithTokenId\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"}],\"name\":\"isApprovedForAll\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint32\",\"name\":\"performanceScheduleId\",\"type\":\"uint32\"}],\"name\":\"isPerformanceScheduled\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"isTicketExpired\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint32\",\"name\":\"performanceScheduleId\",\"type\":\"uint32\"},{\"internalType\":\"uint32\",\"name\":\"seatId\",\"type\":\"uint32\"}],\"name\":\"isTicketMinted\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint32\",\"name\":\"performanceScheduleId\",\"type\":\"uint32\"},{\"internalType\":\"uint32\",\"name\":\"seatId\",\"type\":\"uint32\"}],\"name\":\"isTicketUsed\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint32\",\"name\":\"performanceScheduleId\",\"type\":\"uint32\"},{\"internalType\":\"uint32\",\"name\":\"seatId\",\"type\":\"uint32\"}],\"name\":\"makeTokenId\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint32\",\"name\":\"performanceScheduleId\",\"type\":\"uint32\"},{\"internalType\":\"uint32\",\"name\":\"seatId\",\"type\":\"uint32\"}],\"name\":\"markTicketAsUsed\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"receipent\",\"type\":\"address\"},{\"internalType\":\"uint32\",\"name\":\"performanceScheduleId\",\"type\":\"uint32\"},{\"internalType\":\"uint32\",\"name\":\"seatId\",\"type\":\"uint32\"},{\"internalType\":\"string\",\"name\":\"speicalUri\",\"type\":\"string\"}],\"name\":\"mintTicket\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"obtainPerformanceScheduleId\",\"outputs\":[{\"internalType\":\"uint32\",\"name\":\"\",\"type\":\"uint32\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"obtainSeatId\",\"outputs\":[{\"internalType\":\"uint32\",\"name\":\"\",\"type\":\"uint32\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"ownerOf\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"safeTransferFrom\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\"}],\"name\":\"safeTransferFrom\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint32\",\"name\":\"performanceScheduleId\",\"type\":\"uint32\"},{\"internalType\":\"uint256\",\"name\":\"ticketExpirationTime\",\"type\":\"uint256\"}],\"name\":\"schedulePerformance\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"approved\",\"type\":\"bool\"}],\"name\":\"setApprovalForAll\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint32\",\"name\":\"performanceScheduleId\",\"type\":\"uint32\"},{\"internalType\":\"string\",\"name\":\"newTicketCoverUri\",\"type\":\"string\"}],\"name\":\"setTicketCoverUri\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes4\",\"name\":\"interfaceId\",\"type\":\"bytes4\"}],\"name\":\"supportsInterface\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint32\",\"name\":\"performanceScheduleId\",\"type\":\"uint32\"}],\"name\":\"ticketExpirationTimeOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint32\",\"name\":\"performanceScheduleId\",\"type\":\"uint32\"},{\"internalType\":\"uint32\",\"name\":\"seatId\",\"type\":\"uint32\"}],\"name\":\"ticketOwnerOf\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"index\",\"type\":\"uint256\"}],\"name\":\"tokenByIndex\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"index\",\"type\":\"uint256\"}],\"name\":\"tokenOfOwnerByIndex\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"tokenURI\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]",
	Bin: "0x60806040523480156200001157600080fd5b5060405162004631380380620046318339818101604052810190620000379190620002e6565b8181620000596200004d6200008760201b60201c565b6200008f60201b60201c565b81600190816200006a9190620005b6565b5080600290816200007c9190620005b6565b50505050506200069d565b600033905090565b60008060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff169050816000806101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055508173ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff167f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e060405160405180910390a35050565b6000604051905090565b600080fd5b600080fd5b600080fd5b600080fd5b6000601f19601f8301169050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b620001bc8262000171565b810181811067ffffffffffffffff82111715620001de57620001dd62000182565b5b80604052505050565b6000620001f362000153565b9050620002018282620001b1565b919050565b600067ffffffffffffffff82111562000224576200022362000182565b5b6200022f8262000171565b9050602081019050919050565b60005b838110156200025c5780820151818401526020810190506200023f565b60008484015250505050565b60006200027f620002798462000206565b620001e7565b9050828152602081018484840111156200029e576200029d6200016c565b5b620002ab8482856200023c565b509392505050565b600082601f830112620002cb57620002ca62000167565b5b8151620002dd84826020860162000268565b91505092915050565b600080604083850312156200030057620002ff6200015d565b5b600083015167ffffffffffffffff81111562000321576200032062000162565b5b6200032f85828601620002b3565b925050602083015167ffffffffffffffff81111562000353576200035262000162565b5b6200036185828601620002b3565b9150509250929050565b600081519050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052602260045260246000fd5b60006002820490506001821680620003be57607f821691505b602082108103620003d457620003d362000376565b5b50919050565b60008190508160005260206000209050919050565b60006020601f8301049050919050565b600082821b905092915050565b6000600883026200043e7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff82620003ff565b6200044a8683620003ff565b95508019841693508086168417925050509392505050565b6000819050919050565b6000819050919050565b600062000497620004916200048b8462000462565b6200046c565b62000462565b9050919050565b6000819050919050565b620004b38362000476565b620004cb620004c2826200049e565b8484546200040c565b825550505050565b600090565b620004e2620004d3565b620004ef818484620004a8565b505050565b5b8181101562000517576200050b600082620004d8565b600181019050620004f5565b5050565b601f82111562000566576200053081620003da565b6200053b84620003ef565b810160208510156200054b578190505b620005636200055a85620003ef565b830182620004f4565b50505b505050565b600082821c905092915050565b60006200058b600019846008026200056b565b1980831691505092915050565b6000620005a6838362000578565b9150826002028217905092915050565b620005c1826200036b565b67ffffffffffffffff811115620005dd57620005dc62000182565b5b620005e98254620003a5565b620005f68282856200051b565b600060209050601f8311600181146200062e576000841562000619578287015190505b62000625858262000598565b86555062000695565b601f1984166200063e86620003da565b60005b82811015620006685784890151825560018201915060208501945060208101905062000641565b8683101562000688578489015162000684601f89168262000578565b8355505b6001600288020188555050505b505050505050565b613f8480620006ad6000396000f3fe608060405234801561001057600080fd5b50600436106102065760003560e01c80636f074cce1161011a578063a846b84b116100ad578063c8d486581161007c578063c8d486581461066d578063d0c8c3dc14610689578063e985e9c5146106b9578063ef866e0e146106e9578063f2fde38b1461071957610206565b8063a846b84b146105c1578063ad5023fb146105f1578063b88d4fde14610621578063c87b56dd1461063d57610206565b80638da5cb5b116100e95780638da5cb5b1461054d5780638e0fdff81461056b57806395d89b4114610587578063a22cb465146105a557610206565b80636f074cce146104b357806370a08231146104e3578063715018a614610513578063824b7e7a1461051d57610206565b806323b872dd1161019d5780634ee07f4f1161016c5780634ee07f4f146103eb5780634f6ccce7146104075780635fdac1a3146104375780636352211e146104535780636eed43a11461048357610206565b806323b872dd146103535780632f745c591461036f5780633a28ea571461039f57806342842e0e146103cf57610206565b806318160ddd116101d957806318160ddd146102a55780631a428694146102c3578063210f2158146102f357806322f2dc3c1461032357610206565b806301ffc9a71461020b57806306fdde031461023b578063081812fc14610259578063095ea7b314610289575b600080fd5b610225600480360381019061022091906128d3565b610735565b604051610232919061291b565b60405180910390f35b6102436107af565b60405161025091906129c6565b60405180910390f35b610273600480360381019061026e9190612a1e565b610841565b6040516102809190612a8c565b60405180910390f35b6102a3600480360381019061029e9190612ad3565b610887565b005b6102ad61099e565b6040516102ba9190612b22565b60405180910390f35b6102dd60048036038101906102d89190612b79565b6109ab565b6040516102ea919061291b565b60405180910390f35b61030d60048036038101906103089190612b79565b6109e2565b60405161031a9190612b22565b60405180910390f35b61033d60048036038101906103389190612b79565b6109ff565b60405161034a919061291b565b60405180910390f35b61036d60048036038101906103689190612bb9565b610a5c565b005b61038960048036038101906103849190612ad3565b610abc565b6040516103969190612b22565b60405180910390f35b6103b960048036038101906103b49190612a1e565b610b61565b6040516103c69190612c1b565b60405180910390f35b6103e960048036038101906103e49190612bb9565b610b71565b005b61040560048036038101906104009190612c36565b610b91565b005b610421600480360381019061041c9190612a1e565b610c39565b60405161042e9190612b22565b60405180910390f35b610451600480360381019061044c9190612b79565b610caa565b005b61046d60048036038101906104689190612a1e565b610cfd565b60405161047a9190612a8c565b60405180910390f35b61049d60048036038101906104989190612a1e565b610d83565b6040516104aa9190612c1b565b60405180910390f35b6104cd60048036038101906104c89190612c76565b610d97565b6040516104da9190612b22565b60405180910390f35b6104fd60048036038101906104f89190612ca3565b610db2565b60405161050a9190612b22565b60405180910390f35b61051b610e69565b005b61053760048036038101906105329190612c76565b610e7d565b60405161054491906129c6565b60405180910390f35b610555610e98565b6040516105629190612a8c565b60405180910390f35b61058560048036038101906105809190612e05565b610ec1565b005b61058f610edb565b60405161059c91906129c6565b60405180910390f35b6105bf60048036038101906105ba9190612eb4565b610f6d565b005b6105db60048036038101906105d69190612b79565b610f83565b6040516105e89190612a8c565b60405180910390f35b61060b60048036038101906106069190612a1e565b610fad565b60405161061891906129c6565b60405180910390f35b61063b60048036038101906106369190612f95565b610fd6565b005b61065760048036038101906106529190612a1e565b611038565b60405161066491906129c6565b60405180910390f35b61068760048036038101906106829190613018565b611134565b005b6106a3600480360381019061069e9190612a1e565b611179565b6040516106b0919061291b565b60405180910390f35b6106d360048036038101906106ce9190613074565b61119c565b6040516106e0919061291b565b60405180910390f35b61070360048036038101906106fe9190612c76565b611230565b604051610710919061291b565b60405180910390f35b610733600480360381019061072e9190612ca3565b611269565b005b60007f780e9d63000000000000000000000000000000000000000000000000000000007bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916827bffffffffffffffffffffffffffffffffffffffffffffffffffffffff191614806107a857506107a7826112ec565b5b9050919050565b6060600180546107be906130e3565b80601f01602080910402602001604051908101604052809291908181526020018280546107ea906130e3565b80156108375780601f1061080c57610100808354040283529160200191610837565b820191906000526020600020905b81548152906001019060200180831161081a57829003601f168201915b5050505050905090565b600061084c826113ce565b6005600083815260200190815260200160002060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff169050919050565b600061089282610cfd565b90508073ffffffffffffffffffffffffffffffffffffffff168373ffffffffffffffffffffffffffffffffffffffff1603610902576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016108f990613186565b60405180910390fd5b8073ffffffffffffffffffffffffffffffffffffffff16610921611419565b73ffffffffffffffffffffffffffffffffffffffff161480610950575061094f8161094a611419565b61119c565b5b61098f576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161098690613218565b60405180910390fd5b6109998383611421565b505050565b6000600980549050905090565b60006109bf6109ba84846109e2565b6113ce565b6109c983836114da565b60000160009054906101000a900460ff16905092915050565b60008163ffffffff1660208463ffffffff16901b17905092915050565b6000610a0a8361155e565b6000600b60008563ffffffff1663ffffffff168152602001908152602001600020905060008160000160008563ffffffff1663ffffffff16815260200190815260200160002054141591505092915050565b610a6d610a67611419565b826115d0565b610aac576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610aa3906132aa565b60405180910390fd5b610ab7838383611665565b505050565b6000610ac783610db2565b8210610b08576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610aff9061333c565b60405180910390fd5b600760008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020600083815260200190815260200160002054905092915050565b600063ffffffff82169050919050565b610b8c83838360405180602001604052806000815250610fd6565b505050565b610b9961195e565b6000600b60008463ffffffff1663ffffffff16815260200190815260200160002090508060040160009054906101000a900460ff1615610c0e576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610c05906133ce565b60405180910390fd5b60018160040160006101000a81548160ff021916908315150217905550818160020181905550505050565b6000610c4361099e565b8210610c84576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610c7b90613460565b60405180910390fd5b60098281548110610c9857610c97613480565b5b90600052602060002001549050919050565b610cb261195e565b610cbb8261155e565b610ccd610cc883836109e2565b6113ce565b6000610cd983836114da565b905060018160000160006101000a81548160ff021916908315150217905550505050565b600080610d09836119dc565b9050600073ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff1603610d7a576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610d71906134fb565b60405180910390fd5b80915050919050565b600063ffffffff602083901c169050919050565b6000610da28261155e565b610dab82611a19565b9050919050565b60008073ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff1603610e22576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610e199061358d565b60405180910390fd5b600460008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020549050919050565b610e7161195e565b610e7b6000611a4a565b565b6060610e888261155e565b610e9182611b0e565b9050919050565b60008060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16905090565b610ec961195e565b610ed584848484611bc2565b50505050565b606060028054610eea906130e3565b80601f0160208091040260200160405190810160405280929190818152602001828054610f16906130e3565b8015610f635780601f10610f3857610100808354040283529160200191610f63565b820191906000526020600020905b815481529060010190602001808311610f4657829003601f168201915b5050505050905090565b610f7f610f78611419565b8383611d1c565b5050565b600080610f9084846109e2565b9050610f9b816113ce565b610fa481610cfd565b91505092915050565b60606000610fba83610d83565b9050610fc58161155e565b610fce81611b0e565b915050919050565b610fe7610fe1611419565b836115d0565b611026576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161101d906132aa565b60405180910390fd5b61103284848484611e88565b50505050565b6060611043826113ce565b600061105f61105184610d83565b61105a85610b61565b6114da565b905061106a83611ee4565b801561108457508060000160009054906101000a900460ff165b61109e5761109961109484610d83565b611b0e565b61112c565b8060010180546110ad906130e3565b80601f01602080910402602001604051908101604052809291908181526020018280546110d9906130e3565b80156111265780601f106110fb57610100808354040283529160200191611126565b820191906000526020600020905b81548152906001019060200180831161110957829003601f168201915b50505050505b915050919050565b61113c61195e565b6111458261155e565b80600b60008463ffffffff1663ffffffff16815260200190815260200160002060030190816111749190613759565b505050565b600061118c61118783610d83565b61155e565b61119582611ee4565b9050919050565b6000600660008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060009054906101000a900460ff16905092915050565b6000600b60008363ffffffff1663ffffffff16815260200190815260200160002060040160009054906101000a900460ff169050919050565b61127161195e565b600073ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff16036112e0576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016112d79061389d565b60405180910390fd5b6112e981611a4a565b50565b60007f80ac58cd000000000000000000000000000000000000000000000000000000007bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916827bffffffffffffffffffffffffffffffffffffffffffffffffffffffff191614806113b757507f5b5e139f000000000000000000000000000000000000000000000000000000007bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916827bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916145b806113c757506113c682611f0c565b5b9050919050565b6113d781611f76565b611416576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161140d906134fb565b60405180910390fd5b50565b600033905090565b816005600083815260200190815260200160002060006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550808273ffffffffffffffffffffffffffffffffffffffff1661149483610cfd565b73ffffffffffffffffffffffffffffffffffffffff167f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b92560405160405180910390a45050565b600080600b60008563ffffffff1663ffffffff168152602001908152602001600020905060008160000160008563ffffffff1663ffffffff1681526020019081526020016000205490508160010160018261153591906138ec565b8154811061154657611545613480565b5b90600052602060002090600202019250505092915050565b600b60008263ffffffff1663ffffffff16815260200190815260200160002060040160009054906101000a900460ff166115cd576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016115c490613992565b60405180910390fd5b50565b6000806115dc83610cfd565b90508073ffffffffffffffffffffffffffffffffffffffff168473ffffffffffffffffffffffffffffffffffffffff16148061161e575061161d818561119c565b5b8061165c57508373ffffffffffffffffffffffffffffffffffffffff1661164484610841565b73ffffffffffffffffffffffffffffffffffffffff16145b91505092915050565b8273ffffffffffffffffffffffffffffffffffffffff1661168582610cfd565b73ffffffffffffffffffffffffffffffffffffffff16146116db576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016116d290613a24565b60405180910390fd5b600073ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff160361174a576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161174190613ab6565b60405180910390fd5b6117578383836001611fb7565b8273ffffffffffffffffffffffffffffffffffffffff1661177782610cfd565b73ffffffffffffffffffffffffffffffffffffffff16146117cd576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016117c490613a24565b60405180910390fd5b6005600082815260200190815260200160002060006101000a81549073ffffffffffffffffffffffffffffffffffffffff02191690556001600460008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020600082825403925050819055506001600460008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008282540192505081905550816003600083815260200190815260200160002060006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550808273ffffffffffffffffffffffffffffffffffffffff168473ffffffffffffffffffffffffffffffffffffffff167fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef60405160405180910390a46119598383836001612115565b505050565b611966611419565b73ffffffffffffffffffffffffffffffffffffffff16611984610e98565b73ffffffffffffffffffffffffffffffffffffffff16146119da576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016119d190613b22565b60405180910390fd5b565b60006003600083815260200190815260200160002060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff169050919050565b600080600b60008463ffffffff1663ffffffff16815260200190815260200160002090508060020154915050919050565b60008060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff169050816000806101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055508173ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff167f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e060405160405180910390a35050565b6060600b60008363ffffffff1663ffffffff1681526020019081526020016000206003018054611b3d906130e3565b80601f0160208091040260200160405190810160405280929190818152602001828054611b69906130e3565b8015611bb65780601f10611b8b57610100808354040283529160200191611bb6565b820191906000526020600020905b815481529060010190602001808311611b9957829003601f168201915b50505050509050919050565b611bcb8361155e565b6000600b60008563ffffffff1663ffffffff168152602001908152602001600020905060008160000160008563ffffffff1663ffffffff1681526020019081526020016000205414611c52576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611c4990613bb4565b60405180910390fd5b6000611c5e85856109e2565b9050611c6a868261211b565b81600101604051806040016040528060001515815260200185815250908060018154018082558091505060019003906000526020600020906002020160009091909190915060008201518160000160006101000a81548160ff0219169083151502179055506020820151816001019081611ce49190613759565b50505081600101805490508260000160008663ffffffff1663ffffffff16815260200190815260200160002081905550505050505050565b8173ffffffffffffffffffffffffffffffffffffffff168373ffffffffffffffffffffffffffffffffffffffff1603611d8a576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611d8190613c20565b60405180910390fd5b80600660008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060006101000a81548160ff0219169083151502179055508173ffffffffffffffffffffffffffffffffffffffff168373ffffffffffffffffffffffffffffffffffffffff167f17307eab39ab6107e8899845ad3d59bd9653f200f220920489ca2b5937696c3183604051611e7b919061291b565b60405180910390a3505050565b611e93848484611665565b611e9f84848484612139565b611ede576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611ed590613cb2565b60405180910390fd5b50505050565b600080611ef083610d83565b90506000611efd82611a19565b90504281111592505050919050565b60007f01ffc9a7000000000000000000000000000000000000000000000000000000007bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916827bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916149050919050565b60008073ffffffffffffffffffffffffffffffffffffffff16611f98836119dc565b73ffffffffffffffffffffffffffffffffffffffff1614159050919050565b611fc3848484846122c0565b6001811115612007576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611ffe90613d44565b60405180910390fd5b6000829050600073ffffffffffffffffffffffffffffffffffffffff168573ffffffffffffffffffffffffffffffffffffffff160361204e57612049816122c6565b61208d565b8373ffffffffffffffffffffffffffffffffffffffff168573ffffffffffffffffffffffffffffffffffffffff161461208c5761208b858261230f565b5b5b600073ffffffffffffffffffffffffffffffffffffffff168473ffffffffffffffffffffffffffffffffffffffff16036120cf576120ca8161247c565b61210e565b8473ffffffffffffffffffffffffffffffffffffffff168473ffffffffffffffffffffffffffffffffffffffff161461210d5761210c848261254d565b5b5b5050505050565b50505050565b6121358282604051806020016040528060008152506125cc565b5050565b600061215a8473ffffffffffffffffffffffffffffffffffffffff16612627565b156122b3578373ffffffffffffffffffffffffffffffffffffffff1663150b7a02612183611419565b8786866040518563ffffffff1660e01b81526004016121a59493929190613db9565b6020604051808303816000875af19250505080156121e157506040513d601f19601f820116820180604052508101906121de9190613e1a565b60015b612263573d8060008114612211576040519150601f19603f3d011682016040523d82523d6000602084013e612216565b606091505b50600081510361225b576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161225290613cb2565b60405180910390fd5b805181602001fd5b63150b7a0260e01b7bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916817bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916149150506122b8565b600190505b949350505050565b50505050565b600980549050600a600083815260200190815260200160002081905550600981908060018154018082558091505060019003906000526020600020016000909190919091505550565b6000600161231c84610db2565b61232691906138ec565b905060006008600084815260200190815260200160002054905081811461240b576000600760008673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020600084815260200190815260200160002054905080600760008773ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020600084815260200190815260200160002081905550816008600083815260200190815260200160002081905550505b6008600084815260200190815260200160002060009055600760008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008381526020019081526020016000206000905550505050565b6000600160098054905061249091906138ec565b90506000600a60008481526020019081526020016000205490506000600983815481106124c0576124bf613480565b5b9060005260206000200154905080600983815481106124e2576124e1613480565b5b906000526020600020018190555081600a600083815260200190815260200160002081905550600a600085815260200190815260200160002060009055600980548061253157612530613e47565b5b6001900381819060005260206000200160009055905550505050565b600061255883610db2565b905081600760008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020600083815260200190815260200160002081905550806008600084815260200190815260200160002081905550505050565b6125d6838361264a565b6125e36000848484612139565b612622576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161261990613cb2565b60405180910390fd5b505050565b6000808273ffffffffffffffffffffffffffffffffffffffff163b119050919050565b600073ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff16036126b9576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016126b090613ec2565b60405180910390fd5b6126c281611f76565b15612702576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016126f990613f2e565b60405180910390fd5b612710600083836001611fb7565b61271981611f76565b15612759576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161275090613f2e565b60405180910390fd5b6001600460008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008282540192505081905550816003600083815260200190815260200160002060006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550808273ffffffffffffffffffffffffffffffffffffffff16600073ffffffffffffffffffffffffffffffffffffffff167fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef60405160405180910390a4612863600083836001612115565b5050565b6000604051905090565b600080fd5b600080fd5b60007fffffffff0000000000000000000000000000000000000000000000000000000082169050919050565b6128b08161287b565b81146128bb57600080fd5b50565b6000813590506128cd816128a7565b92915050565b6000602082840312156128e9576128e8612871565b5b60006128f7848285016128be565b91505092915050565b60008115159050919050565b61291581612900565b82525050565b6000602082019050612930600083018461290c565b92915050565b600081519050919050565b600082825260208201905092915050565b60005b83811015612970578082015181840152602081019050612955565b60008484015250505050565b6000601f19601f8301169050919050565b600061299882612936565b6129a28185612941565b93506129b2818560208601612952565b6129bb8161297c565b840191505092915050565b600060208201905081810360008301526129e0818461298d565b905092915050565b6000819050919050565b6129fb816129e8565b8114612a0657600080fd5b50565b600081359050612a18816129f2565b92915050565b600060208284031215612a3457612a33612871565b5b6000612a4284828501612a09565b91505092915050565b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b6000612a7682612a4b565b9050919050565b612a8681612a6b565b82525050565b6000602082019050612aa16000830184612a7d565b92915050565b612ab081612a6b565b8114612abb57600080fd5b50565b600081359050612acd81612aa7565b92915050565b60008060408385031215612aea57612ae9612871565b5b6000612af885828601612abe565b9250506020612b0985828601612a09565b9150509250929050565b612b1c816129e8565b82525050565b6000602082019050612b376000830184612b13565b92915050565b600063ffffffff82169050919050565b612b5681612b3d565b8114612b6157600080fd5b50565b600081359050612b7381612b4d565b92915050565b60008060408385031215612b9057612b8f612871565b5b6000612b9e85828601612b64565b9250506020612baf85828601612b64565b9150509250929050565b600080600060608486031215612bd257612bd1612871565b5b6000612be086828701612abe565b9350506020612bf186828701612abe565b9250506040612c0286828701612a09565b9150509250925092565b612c1581612b3d565b82525050565b6000602082019050612c306000830184612c0c565b92915050565b60008060408385031215612c4d57612c4c612871565b5b6000612c5b85828601612b64565b9250506020612c6c85828601612a09565b9150509250929050565b600060208284031215612c8c57612c8b612871565b5b6000612c9a84828501612b64565b91505092915050565b600060208284031215612cb957612cb8612871565b5b6000612cc784828501612abe565b91505092915050565b600080fd5b600080fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b612d128261297c565b810181811067ffffffffffffffff82111715612d3157612d30612cda565b5b80604052505050565b6000612d44612867565b9050612d508282612d09565b919050565b600067ffffffffffffffff821115612d7057612d6f612cda565b5b612d798261297c565b9050602081019050919050565b82818337600083830152505050565b6000612da8612da384612d55565b612d3a565b905082815260208101848484011115612dc457612dc3612cd5565b5b612dcf848285612d86565b509392505050565b600082601f830112612dec57612deb612cd0565b5b8135612dfc848260208601612d95565b91505092915050565b60008060008060808587031215612e1f57612e1e612871565b5b6000612e2d87828801612abe565b9450506020612e3e87828801612b64565b9350506040612e4f87828801612b64565b925050606085013567ffffffffffffffff811115612e7057612e6f612876565b5b612e7c87828801612dd7565b91505092959194509250565b612e9181612900565b8114612e9c57600080fd5b50565b600081359050612eae81612e88565b92915050565b60008060408385031215612ecb57612eca612871565b5b6000612ed985828601612abe565b9250506020612eea85828601612e9f565b9150509250929050565b600067ffffffffffffffff821115612f0f57612f0e612cda565b5b612f188261297c565b9050602081019050919050565b6000612f38612f3384612ef4565b612d3a565b905082815260208101848484011115612f5457612f53612cd5565b5b612f5f848285612d86565b509392505050565b600082601f830112612f7c57612f7b612cd0565b5b8135612f8c848260208601612f25565b91505092915050565b60008060008060808587031215612faf57612fae612871565b5b6000612fbd87828801612abe565b9450506020612fce87828801612abe565b9350506040612fdf87828801612a09565b925050606085013567ffffffffffffffff81111561300057612fff612876565b5b61300c87828801612f67565b91505092959194509250565b6000806040838503121561302f5761302e612871565b5b600061303d85828601612b64565b925050602083013567ffffffffffffffff81111561305e5761305d612876565b5b61306a85828601612dd7565b9150509250929050565b6000806040838503121561308b5761308a612871565b5b600061309985828601612abe565b92505060206130aa85828601612abe565b9150509250929050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052602260045260246000fd5b600060028204905060018216806130fb57607f821691505b60208210810361310e5761310d6130b4565b5b50919050565b7f4552433732313a20617070726f76616c20746f2063757272656e74206f776e6560008201527f7200000000000000000000000000000000000000000000000000000000000000602082015250565b6000613170602183612941565b915061317b82613114565b604082019050919050565b6000602082019050818103600083015261319f81613163565b9050919050565b7f4552433732313a20617070726f76652063616c6c6572206973206e6f7420746f60008201527f6b656e206f776e6572206f7220617070726f76656420666f7220616c6c000000602082015250565b6000613202603d83612941565b915061320d826131a6565b604082019050919050565b60006020820190508181036000830152613231816131f5565b9050919050565b7f4552433732313a2063616c6c6572206973206e6f7420746f6b656e206f776e6560008201527f72206f7220617070726f76656400000000000000000000000000000000000000602082015250565b6000613294602d83612941565b915061329f82613238565b604082019050919050565b600060208201905081810360008301526132c381613287565b9050919050565b7f455243373231456e756d657261626c653a206f776e657220696e646578206f7560008201527f74206f6620626f756e6473000000000000000000000000000000000000000000602082015250565b6000613326602b83612941565b9150613331826132ca565b604082019050919050565b6000602082019050818103600083015261335581613319565b9050919050565b7f7363686564756c65506572666f726d616e636528293a20706572666f726d616e60008201527f636520616c7265616479207363686564756c65642e0000000000000000000000602082015250565b60006133b8603583612941565b91506133c38261335c565b604082019050919050565b600060208201905081810360008301526133e7816133ab565b9050919050565b7f455243373231456e756d657261626c653a20676c6f62616c20696e646578206f60008201527f7574206f6620626f756e64730000000000000000000000000000000000000000602082015250565b600061344a602c83612941565b9150613455826133ee565b604082019050919050565b600060208201905081810360008301526134798161343d565b9050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b7f4552433732313a20696e76616c696420746f6b656e2049440000000000000000600082015250565b60006134e5601883612941565b91506134f0826134af565b602082019050919050565b60006020820190508181036000830152613514816134d8565b9050919050565b7f4552433732313a2061646472657373207a65726f206973206e6f74206120766160008201527f6c6964206f776e65720000000000000000000000000000000000000000000000602082015250565b6000613577602983612941565b91506135828261351b565b604082019050919050565b600060208201905081810360008301526135a68161356a565b9050919050565b60008190508160005260206000209050919050565b60006020601f8301049050919050565b600082821b905092915050565b60006008830261360f7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff826135d2565b61361986836135d2565b95508019841693508086168417925050509392505050565b6000819050919050565b600061365661365161364c846129e8565b613631565b6129e8565b9050919050565b6000819050919050565b6136708361363b565b61368461367c8261365d565b8484546135df565b825550505050565b600090565b61369961368c565b6136a4818484613667565b505050565b5b818110156136c8576136bd600082613691565b6001810190506136aa565b5050565b601f82111561370d576136de816135ad565b6136e7846135c2565b810160208510156136f6578190505b61370a613702856135c2565b8301826136a9565b50505b505050565b600082821c905092915050565b600061373060001984600802613712565b1980831691505092915050565b6000613749838361371f565b9150826002028217905092915050565b61376282612936565b67ffffffffffffffff81111561377b5761377a612cda565b5b61378582546130e3565b6137908282856136cc565b600060209050601f8311600181146137c357600084156137b1578287015190505b6137bb858261373d565b865550613823565b601f1984166137d1866135ad565b60005b828110156137f9578489015182556001820191506020850194506020810190506137d4565b868310156138165784890151613812601f89168261371f565b8355505b6001600288020188555050505b505050505050565b7f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206160008201527f6464726573730000000000000000000000000000000000000000000000000000602082015250565b6000613887602683612941565b91506138928261382b565b604082019050919050565b600060208201905081810360008301526138b68161387a565b9050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b60006138f7826129e8565b9150613902836129e8565b925082820390508181111561391a576139196138bd565b5b92915050565b7f5f617373657274506572666f726d616e63655363686564756c65643a2070657260008201527f666f726d616e6365206973206e6f74207363686564756c656400000000000000602082015250565b600061397c603983612941565b915061398782613920565b604082019050919050565b600060208201905081810360008301526139ab8161396f565b9050919050565b7f4552433732313a207472616e736665722066726f6d20696e636f72726563742060008201527f6f776e6572000000000000000000000000000000000000000000000000000000602082015250565b6000613a0e602583612941565b9150613a19826139b2565b604082019050919050565b60006020820190508181036000830152613a3d81613a01565b9050919050565b7f4552433732313a207472616e7366657220746f20746865207a65726f2061646460008201527f7265737300000000000000000000000000000000000000000000000000000000602082015250565b6000613aa0602483612941565b9150613aab82613a44565b604082019050919050565b60006020820190508181036000830152613acf81613a93565b9050919050565b7f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e6572600082015250565b6000613b0c602083612941565b9150613b1782613ad6565b602082019050919050565b60006020820190508181036000830152613b3b81613aff565b9050919050565b7f5f6d696e745469636b657428293a207469636b65742077617320616c7265616460008201527f79206d696e746564000000000000000000000000000000000000000000000000602082015250565b6000613b9e602883612941565b9150613ba982613b42565b604082019050919050565b60006020820190508181036000830152613bcd81613b91565b9050919050565b7f4552433732313a20617070726f766520746f2063616c6c657200000000000000600082015250565b6000613c0a601983612941565b9150613c1582613bd4565b602082019050919050565b60006020820190508181036000830152613c3981613bfd565b9050919050565b7f4552433732313a207472616e7366657220746f206e6f6e20455243373231526560008201527f63656976657220696d706c656d656e7465720000000000000000000000000000602082015250565b6000613c9c603283612941565b9150613ca782613c40565b604082019050919050565b60006020820190508181036000830152613ccb81613c8f565b9050919050565b7f455243373231456e756d657261626c653a20636f6e736563757469766520747260008201527f616e7366657273206e6f7420737570706f727465640000000000000000000000602082015250565b6000613d2e603583612941565b9150613d3982613cd2565b604082019050919050565b60006020820190508181036000830152613d5d81613d21565b9050919050565b600081519050919050565b600082825260208201905092915050565b6000613d8b82613d64565b613d958185613d6f565b9350613da5818560208601612952565b613dae8161297c565b840191505092915050565b6000608082019050613dce6000830187612a7d565b613ddb6020830186612a7d565b613de86040830185612b13565b8181036060830152613dfa8184613d80565b905095945050505050565b600081519050613e14816128a7565b92915050565b600060208284031215613e3057613e2f612871565b5b6000613e3e84828501613e05565b91505092915050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052603160045260246000fd5b7f4552433732313a206d696e7420746f20746865207a65726f2061646472657373600082015250565b6000613eac602083612941565b9150613eb782613e76565b602082019050919050565b60006020820190508181036000830152613edb81613e9f565b9050919050565b7f4552433732313a20746f6b656e20616c7265616479206d696e74656400000000600082015250565b6000613f18601c83612941565b9150613f2382613ee2565b602082019050919050565b60006020820190508181036000830152613f4781613f0b565b905091905056fea2646970667358221220dc4d0ad1ce2281d0c30d8dc05e774cb04d6696ef5c631264c1d4a6329a38243e64736f6c63430008130033",
}

// ContractABI is the input ABI used to generate the binding from.
// Deprecated: Use ContractMetaData.ABI instead.
var ContractABI = ContractMetaData.ABI

// ContractBin is the compiled bytecode used for deploying new contracts.
// Deprecated: Use ContractMetaData.Bin instead.
var ContractBin = ContractMetaData.Bin

// DeployContract deploys a new Ethereum contract, binding an instance of Contract to it.
func DeployContract(auth *bind.TransactOpts, backend bind.ContractBackend, name_ string, symbol_ string) (common.Address, *types.Transaction, *Contract, error) {
	parsed, err := ContractMetaData.GetAbi()
	if err != nil {
		return common.Address{}, nil, nil, err
	}
	if parsed == nil {
		return common.Address{}, nil, nil, errors.New("GetABI returned nil")
	}

	address, tx, contract, err := bind.DeployContract(auth, *parsed, common.FromHex(ContractBin), backend, name_, symbol_)
	if err != nil {
		return common.Address{}, nil, nil, err
	}
	return address, tx, &Contract{ContractCaller: ContractCaller{contract: contract}, ContractTransactor: ContractTransactor{contract: contract}, ContractFilterer: ContractFilterer{contract: contract}}, nil
}

// Contract is an auto generated Go binding around an Ethereum contract.
type Contract struct {
	ContractCaller     // Read-only binding to the contract
	ContractTransactor // Write-only binding to the contract
	ContractFilterer   // Log filterer for contract events
}

// ContractCaller is an auto generated read-only Go binding around an Ethereum contract.
type ContractCaller struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// ContractTransactor is an auto generated write-only Go binding around an Ethereum contract.
type ContractTransactor struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// ContractFilterer is an auto generated log filtering Go binding around an Ethereum contract events.
type ContractFilterer struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// ContractSession is an auto generated Go binding around an Ethereum contract,
// with pre-set call and transact options.
type ContractSession struct {
	Contract     *Contract         // Generic contract binding to set the session for
	CallOpts     bind.CallOpts     // Call options to use throughout this session
	TransactOpts bind.TransactOpts // Transaction auth options to use throughout this session
}

// ContractCallerSession is an auto generated read-only Go binding around an Ethereum contract,
// with pre-set call options.
type ContractCallerSession struct {
	Contract *ContractCaller // Generic contract caller binding to set the session for
	CallOpts bind.CallOpts   // Call options to use throughout this session
}

// ContractTransactorSession is an auto generated write-only Go binding around an Ethereum contract,
// with pre-set transact options.
type ContractTransactorSession struct {
	Contract     *ContractTransactor // Generic contract transactor binding to set the session for
	TransactOpts bind.TransactOpts   // Transaction auth options to use throughout this session
}

// ContractRaw is an auto generated low-level Go binding around an Ethereum contract.
type ContractRaw struct {
	Contract *Contract // Generic contract binding to access the raw methods on
}

// ContractCallerRaw is an auto generated low-level read-only Go binding around an Ethereum contract.
type ContractCallerRaw struct {
	Contract *ContractCaller // Generic read-only contract binding to access the raw methods on
}

// ContractTransactorRaw is an auto generated low-level write-only Go binding around an Ethereum contract.
type ContractTransactorRaw struct {
	Contract *ContractTransactor // Generic write-only contract binding to access the raw methods on
}

// NewContract creates a new instance of Contract, bound to a specific deployed contract.
func NewContract(address common.Address, backend bind.ContractBackend) (*Contract, error) {
	contract, err := bindContract(address, backend, backend, backend)
	if err != nil {
		return nil, err
	}
	return &Contract{ContractCaller: ContractCaller{contract: contract}, ContractTransactor: ContractTransactor{contract: contract}, ContractFilterer: ContractFilterer{contract: contract}}, nil
}

// NewContractCaller creates a new read-only instance of Contract, bound to a specific deployed contract.
func NewContractCaller(address common.Address, caller bind.ContractCaller) (*ContractCaller, error) {
	contract, err := bindContract(address, caller, nil, nil)
	if err != nil {
		return nil, err
	}
	return &ContractCaller{contract: contract}, nil
}

// NewContractTransactor creates a new write-only instance of Contract, bound to a specific deployed contract.
func NewContractTransactor(address common.Address, transactor bind.ContractTransactor) (*ContractTransactor, error) {
	contract, err := bindContract(address, nil, transactor, nil)
	if err != nil {
		return nil, err
	}
	return &ContractTransactor{contract: contract}, nil
}

// NewContractFilterer creates a new log filterer instance of Contract, bound to a specific deployed contract.
func NewContractFilterer(address common.Address, filterer bind.ContractFilterer) (*ContractFilterer, error) {
	contract, err := bindContract(address, nil, nil, filterer)
	if err != nil {
		return nil, err
	}
	return &ContractFilterer{contract: contract}, nil
}

// bindContract binds a generic wrapper to an already deployed contract.
func bindContract(address common.Address, caller bind.ContractCaller, transactor bind.ContractTransactor, filterer bind.ContractFilterer) (*bind.BoundContract, error) {
	parsed, err := ContractMetaData.GetAbi()
	if err != nil {
		return nil, err
	}
	return bind.NewBoundContract(address, *parsed, caller, transactor, filterer), nil
}

// Call invokes the (constant) contract method with params as input values and
// sets the output to result. The result type might be a single field for simple
// returns, a slice of interfaces for anonymous returns and a struct for named
// returns.
func (_Contract *ContractRaw) Call(opts *bind.CallOpts, result *[]interface{}, method string, params ...interface{}) error {
	return _Contract.Contract.ContractCaller.contract.Call(opts, result, method, params...)
}

// Transfer initiates a plain transaction to move funds to the contract, calling
// its default method if one is available.
func (_Contract *ContractRaw) Transfer(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _Contract.Contract.ContractTransactor.contract.Transfer(opts)
}

// Transact invokes the (paid) contract method with params as input values.
func (_Contract *ContractRaw) Transact(opts *bind.TransactOpts, method string, params ...interface{}) (*types.Transaction, error) {
	return _Contract.Contract.ContractTransactor.contract.Transact(opts, method, params...)
}

// Call invokes the (constant) contract method with params as input values and
// sets the output to result. The result type might be a single field for simple
// returns, a slice of interfaces for anonymous returns and a struct for named
// returns.
func (_Contract *ContractCallerRaw) Call(opts *bind.CallOpts, result *[]interface{}, method string, params ...interface{}) error {
	return _Contract.Contract.contract.Call(opts, result, method, params...)
}

// Transfer initiates a plain transaction to move funds to the contract, calling
// its default method if one is available.
func (_Contract *ContractTransactorRaw) Transfer(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _Contract.Contract.contract.Transfer(opts)
}

// Transact invokes the (paid) contract method with params as input values.
func (_Contract *ContractTransactorRaw) Transact(opts *bind.TransactOpts, method string, params ...interface{}) (*types.Transaction, error) {
	return _Contract.Contract.contract.Transact(opts, method, params...)
}

// BalanceOf is a free data retrieval call binding the contract method 0x70a08231.
//
// Solidity: function balanceOf(address owner) view returns(uint256)
func (_Contract *ContractCaller) BalanceOf(opts *bind.CallOpts, owner common.Address) (*big.Int, error) {
	var out []interface{}
	err := _Contract.contract.Call(opts, &out, "balanceOf", owner)

	if err != nil {
		return *new(*big.Int), err
	}

	out0 := *abi.ConvertType(out[0], new(*big.Int)).(**big.Int)

	return out0, err

}

// BalanceOf is a free data retrieval call binding the contract method 0x70a08231.
//
// Solidity: function balanceOf(address owner) view returns(uint256)
func (_Contract *ContractSession) BalanceOf(owner common.Address) (*big.Int, error) {
	return _Contract.Contract.BalanceOf(&_Contract.CallOpts, owner)
}

// BalanceOf is a free data retrieval call binding the contract method 0x70a08231.
//
// Solidity: function balanceOf(address owner) view returns(uint256)
func (_Contract *ContractCallerSession) BalanceOf(owner common.Address) (*big.Int, error) {
	return _Contract.Contract.BalanceOf(&_Contract.CallOpts, owner)
}

// GetApproved is a free data retrieval call binding the contract method 0x081812fc.
//
// Solidity: function getApproved(uint256 tokenId) view returns(address)
func (_Contract *ContractCaller) GetApproved(opts *bind.CallOpts, tokenId *big.Int) (common.Address, error) {
	var out []interface{}
	err := _Contract.contract.Call(opts, &out, "getApproved", tokenId)

	if err != nil {
		return *new(common.Address), err
	}

	out0 := *abi.ConvertType(out[0], new(common.Address)).(*common.Address)

	return out0, err

}

// GetApproved is a free data retrieval call binding the contract method 0x081812fc.
//
// Solidity: function getApproved(uint256 tokenId) view returns(address)
func (_Contract *ContractSession) GetApproved(tokenId *big.Int) (common.Address, error) {
	return _Contract.Contract.GetApproved(&_Contract.CallOpts, tokenId)
}

// GetApproved is a free data retrieval call binding the contract method 0x081812fc.
//
// Solidity: function getApproved(uint256 tokenId) view returns(address)
func (_Contract *ContractCallerSession) GetApproved(tokenId *big.Int) (common.Address, error) {
	return _Contract.Contract.GetApproved(&_Contract.CallOpts, tokenId)
}

// GetTicketCoverUri is a free data retrieval call binding the contract method 0x824b7e7a.
//
// Solidity: function getTicketCoverUri(uint32 performanceScheduleId) view returns(string)
func (_Contract *ContractCaller) GetTicketCoverUri(opts *bind.CallOpts, performanceScheduleId uint32) (string, error) {
	var out []interface{}
	err := _Contract.contract.Call(opts, &out, "getTicketCoverUri", performanceScheduleId)

	if err != nil {
		return *new(string), err
	}

	out0 := *abi.ConvertType(out[0], new(string)).(*string)

	return out0, err

}

// GetTicketCoverUri is a free data retrieval call binding the contract method 0x824b7e7a.
//
// Solidity: function getTicketCoverUri(uint32 performanceScheduleId) view returns(string)
func (_Contract *ContractSession) GetTicketCoverUri(performanceScheduleId uint32) (string, error) {
	return _Contract.Contract.GetTicketCoverUri(&_Contract.CallOpts, performanceScheduleId)
}

// GetTicketCoverUri is a free data retrieval call binding the contract method 0x824b7e7a.
//
// Solidity: function getTicketCoverUri(uint32 performanceScheduleId) view returns(string)
func (_Contract *ContractCallerSession) GetTicketCoverUri(performanceScheduleId uint32) (string, error) {
	return _Contract.Contract.GetTicketCoverUri(&_Contract.CallOpts, performanceScheduleId)
}

// GetTicketCoverUriWithTokenId is a free data retrieval call binding the contract method 0xad5023fb.
//
// Solidity: function getTicketCoverUriWithTokenId(uint256 tokenId) view returns(string)
func (_Contract *ContractCaller) GetTicketCoverUriWithTokenId(opts *bind.CallOpts, tokenId *big.Int) (string, error) {
	var out []interface{}
	err := _Contract.contract.Call(opts, &out, "getTicketCoverUriWithTokenId", tokenId)

	if err != nil {
		return *new(string), err
	}

	out0 := *abi.ConvertType(out[0], new(string)).(*string)

	return out0, err

}

// GetTicketCoverUriWithTokenId is a free data retrieval call binding the contract method 0xad5023fb.
//
// Solidity: function getTicketCoverUriWithTokenId(uint256 tokenId) view returns(string)
func (_Contract *ContractSession) GetTicketCoverUriWithTokenId(tokenId *big.Int) (string, error) {
	return _Contract.Contract.GetTicketCoverUriWithTokenId(&_Contract.CallOpts, tokenId)
}

// GetTicketCoverUriWithTokenId is a free data retrieval call binding the contract method 0xad5023fb.
//
// Solidity: function getTicketCoverUriWithTokenId(uint256 tokenId) view returns(string)
func (_Contract *ContractCallerSession) GetTicketCoverUriWithTokenId(tokenId *big.Int) (string, error) {
	return _Contract.Contract.GetTicketCoverUriWithTokenId(&_Contract.CallOpts, tokenId)
}

// IsApprovedForAll is a free data retrieval call binding the contract method 0xe985e9c5.
//
// Solidity: function isApprovedForAll(address owner, address operator) view returns(bool)
func (_Contract *ContractCaller) IsApprovedForAll(opts *bind.CallOpts, owner common.Address, operator common.Address) (bool, error) {
	var out []interface{}
	err := _Contract.contract.Call(opts, &out, "isApprovedForAll", owner, operator)

	if err != nil {
		return *new(bool), err
	}

	out0 := *abi.ConvertType(out[0], new(bool)).(*bool)

	return out0, err

}

// IsApprovedForAll is a free data retrieval call binding the contract method 0xe985e9c5.
//
// Solidity: function isApprovedForAll(address owner, address operator) view returns(bool)
func (_Contract *ContractSession) IsApprovedForAll(owner common.Address, operator common.Address) (bool, error) {
	return _Contract.Contract.IsApprovedForAll(&_Contract.CallOpts, owner, operator)
}

// IsApprovedForAll is a free data retrieval call binding the contract method 0xe985e9c5.
//
// Solidity: function isApprovedForAll(address owner, address operator) view returns(bool)
func (_Contract *ContractCallerSession) IsApprovedForAll(owner common.Address, operator common.Address) (bool, error) {
	return _Contract.Contract.IsApprovedForAll(&_Contract.CallOpts, owner, operator)
}

// IsPerformanceScheduled is a free data retrieval call binding the contract method 0xef866e0e.
//
// Solidity: function isPerformanceScheduled(uint32 performanceScheduleId) view returns(bool)
func (_Contract *ContractCaller) IsPerformanceScheduled(opts *bind.CallOpts, performanceScheduleId uint32) (bool, error) {
	var out []interface{}
	err := _Contract.contract.Call(opts, &out, "isPerformanceScheduled", performanceScheduleId)

	if err != nil {
		return *new(bool), err
	}

	out0 := *abi.ConvertType(out[0], new(bool)).(*bool)

	return out0, err

}

// IsPerformanceScheduled is a free data retrieval call binding the contract method 0xef866e0e.
//
// Solidity: function isPerformanceScheduled(uint32 performanceScheduleId) view returns(bool)
func (_Contract *ContractSession) IsPerformanceScheduled(performanceScheduleId uint32) (bool, error) {
	return _Contract.Contract.IsPerformanceScheduled(&_Contract.CallOpts, performanceScheduleId)
}

// IsPerformanceScheduled is a free data retrieval call binding the contract method 0xef866e0e.
//
// Solidity: function isPerformanceScheduled(uint32 performanceScheduleId) view returns(bool)
func (_Contract *ContractCallerSession) IsPerformanceScheduled(performanceScheduleId uint32) (bool, error) {
	return _Contract.Contract.IsPerformanceScheduled(&_Contract.CallOpts, performanceScheduleId)
}

// IsTicketExpired is a free data retrieval call binding the contract method 0xd0c8c3dc.
//
// Solidity: function isTicketExpired(uint256 tokenId) view returns(bool)
func (_Contract *ContractCaller) IsTicketExpired(opts *bind.CallOpts, tokenId *big.Int) (bool, error) {
	var out []interface{}
	err := _Contract.contract.Call(opts, &out, "isTicketExpired", tokenId)

	if err != nil {
		return *new(bool), err
	}

	out0 := *abi.ConvertType(out[0], new(bool)).(*bool)

	return out0, err

}

// IsTicketExpired is a free data retrieval call binding the contract method 0xd0c8c3dc.
//
// Solidity: function isTicketExpired(uint256 tokenId) view returns(bool)
func (_Contract *ContractSession) IsTicketExpired(tokenId *big.Int) (bool, error) {
	return _Contract.Contract.IsTicketExpired(&_Contract.CallOpts, tokenId)
}

// IsTicketExpired is a free data retrieval call binding the contract method 0xd0c8c3dc.
//
// Solidity: function isTicketExpired(uint256 tokenId) view returns(bool)
func (_Contract *ContractCallerSession) IsTicketExpired(tokenId *big.Int) (bool, error) {
	return _Contract.Contract.IsTicketExpired(&_Contract.CallOpts, tokenId)
}

// IsTicketMinted is a free data retrieval call binding the contract method 0x22f2dc3c.
//
// Solidity: function isTicketMinted(uint32 performanceScheduleId, uint32 seatId) view returns(bool)
func (_Contract *ContractCaller) IsTicketMinted(opts *bind.CallOpts, performanceScheduleId uint32, seatId uint32) (bool, error) {
	var out []interface{}
	err := _Contract.contract.Call(opts, &out, "isTicketMinted", performanceScheduleId, seatId)

	if err != nil {
		return *new(bool), err
	}

	out0 := *abi.ConvertType(out[0], new(bool)).(*bool)

	return out0, err

}

// IsTicketMinted is a free data retrieval call binding the contract method 0x22f2dc3c.
//
// Solidity: function isTicketMinted(uint32 performanceScheduleId, uint32 seatId) view returns(bool)
func (_Contract *ContractSession) IsTicketMinted(performanceScheduleId uint32, seatId uint32) (bool, error) {
	return _Contract.Contract.IsTicketMinted(&_Contract.CallOpts, performanceScheduleId, seatId)
}

// IsTicketMinted is a free data retrieval call binding the contract method 0x22f2dc3c.
//
// Solidity: function isTicketMinted(uint32 performanceScheduleId, uint32 seatId) view returns(bool)
func (_Contract *ContractCallerSession) IsTicketMinted(performanceScheduleId uint32, seatId uint32) (bool, error) {
	return _Contract.Contract.IsTicketMinted(&_Contract.CallOpts, performanceScheduleId, seatId)
}

// IsTicketUsed is a free data retrieval call binding the contract method 0x1a428694.
//
// Solidity: function isTicketUsed(uint32 performanceScheduleId, uint32 seatId) view returns(bool)
func (_Contract *ContractCaller) IsTicketUsed(opts *bind.CallOpts, performanceScheduleId uint32, seatId uint32) (bool, error) {
	var out []interface{}
	err := _Contract.contract.Call(opts, &out, "isTicketUsed", performanceScheduleId, seatId)

	if err != nil {
		return *new(bool), err
	}

	out0 := *abi.ConvertType(out[0], new(bool)).(*bool)

	return out0, err

}

// IsTicketUsed is a free data retrieval call binding the contract method 0x1a428694.
//
// Solidity: function isTicketUsed(uint32 performanceScheduleId, uint32 seatId) view returns(bool)
func (_Contract *ContractSession) IsTicketUsed(performanceScheduleId uint32, seatId uint32) (bool, error) {
	return _Contract.Contract.IsTicketUsed(&_Contract.CallOpts, performanceScheduleId, seatId)
}

// IsTicketUsed is a free data retrieval call binding the contract method 0x1a428694.
//
// Solidity: function isTicketUsed(uint32 performanceScheduleId, uint32 seatId) view returns(bool)
func (_Contract *ContractCallerSession) IsTicketUsed(performanceScheduleId uint32, seatId uint32) (bool, error) {
	return _Contract.Contract.IsTicketUsed(&_Contract.CallOpts, performanceScheduleId, seatId)
}

// MakeTokenId is a free data retrieval call binding the contract method 0x210f2158.
//
// Solidity: function makeTokenId(uint32 performanceScheduleId, uint32 seatId) pure returns(uint256)
func (_Contract *ContractCaller) MakeTokenId(opts *bind.CallOpts, performanceScheduleId uint32, seatId uint32) (*big.Int, error) {
	var out []interface{}
	err := _Contract.contract.Call(opts, &out, "makeTokenId", performanceScheduleId, seatId)

	if err != nil {
		return *new(*big.Int), err
	}

	out0 := *abi.ConvertType(out[0], new(*big.Int)).(**big.Int)

	return out0, err

}

// MakeTokenId is a free data retrieval call binding the contract method 0x210f2158.
//
// Solidity: function makeTokenId(uint32 performanceScheduleId, uint32 seatId) pure returns(uint256)
func (_Contract *ContractSession) MakeTokenId(performanceScheduleId uint32, seatId uint32) (*big.Int, error) {
	return _Contract.Contract.MakeTokenId(&_Contract.CallOpts, performanceScheduleId, seatId)
}

// MakeTokenId is a free data retrieval call binding the contract method 0x210f2158.
//
// Solidity: function makeTokenId(uint32 performanceScheduleId, uint32 seatId) pure returns(uint256)
func (_Contract *ContractCallerSession) MakeTokenId(performanceScheduleId uint32, seatId uint32) (*big.Int, error) {
	return _Contract.Contract.MakeTokenId(&_Contract.CallOpts, performanceScheduleId, seatId)
}

// Name is a free data retrieval call binding the contract method 0x06fdde03.
//
// Solidity: function name() view returns(string)
func (_Contract *ContractCaller) Name(opts *bind.CallOpts) (string, error) {
	var out []interface{}
	err := _Contract.contract.Call(opts, &out, "name")

	if err != nil {
		return *new(string), err
	}

	out0 := *abi.ConvertType(out[0], new(string)).(*string)

	return out0, err

}

// Name is a free data retrieval call binding the contract method 0x06fdde03.
//
// Solidity: function name() view returns(string)
func (_Contract *ContractSession) Name() (string, error) {
	return _Contract.Contract.Name(&_Contract.CallOpts)
}

// Name is a free data retrieval call binding the contract method 0x06fdde03.
//
// Solidity: function name() view returns(string)
func (_Contract *ContractCallerSession) Name() (string, error) {
	return _Contract.Contract.Name(&_Contract.CallOpts)
}

// ObtainPerformanceScheduleId is a free data retrieval call binding the contract method 0x6eed43a1.
//
// Solidity: function obtainPerformanceScheduleId(uint256 tokenId) pure returns(uint32)
func (_Contract *ContractCaller) ObtainPerformanceScheduleId(opts *bind.CallOpts, tokenId *big.Int) (uint32, error) {
	var out []interface{}
	err := _Contract.contract.Call(opts, &out, "obtainPerformanceScheduleId", tokenId)

	if err != nil {
		return *new(uint32), err
	}

	out0 := *abi.ConvertType(out[0], new(uint32)).(*uint32)

	return out0, err

}

// ObtainPerformanceScheduleId is a free data retrieval call binding the contract method 0x6eed43a1.
//
// Solidity: function obtainPerformanceScheduleId(uint256 tokenId) pure returns(uint32)
func (_Contract *ContractSession) ObtainPerformanceScheduleId(tokenId *big.Int) (uint32, error) {
	return _Contract.Contract.ObtainPerformanceScheduleId(&_Contract.CallOpts, tokenId)
}

// ObtainPerformanceScheduleId is a free data retrieval call binding the contract method 0x6eed43a1.
//
// Solidity: function obtainPerformanceScheduleId(uint256 tokenId) pure returns(uint32)
func (_Contract *ContractCallerSession) ObtainPerformanceScheduleId(tokenId *big.Int) (uint32, error) {
	return _Contract.Contract.ObtainPerformanceScheduleId(&_Contract.CallOpts, tokenId)
}

// ObtainSeatId is a free data retrieval call binding the contract method 0x3a28ea57.
//
// Solidity: function obtainSeatId(uint256 tokenId) pure returns(uint32)
func (_Contract *ContractCaller) ObtainSeatId(opts *bind.CallOpts, tokenId *big.Int) (uint32, error) {
	var out []interface{}
	err := _Contract.contract.Call(opts, &out, "obtainSeatId", tokenId)

	if err != nil {
		return *new(uint32), err
	}

	out0 := *abi.ConvertType(out[0], new(uint32)).(*uint32)

	return out0, err

}

// ObtainSeatId is a free data retrieval call binding the contract method 0x3a28ea57.
//
// Solidity: function obtainSeatId(uint256 tokenId) pure returns(uint32)
func (_Contract *ContractSession) ObtainSeatId(tokenId *big.Int) (uint32, error) {
	return _Contract.Contract.ObtainSeatId(&_Contract.CallOpts, tokenId)
}

// ObtainSeatId is a free data retrieval call binding the contract method 0x3a28ea57.
//
// Solidity: function obtainSeatId(uint256 tokenId) pure returns(uint32)
func (_Contract *ContractCallerSession) ObtainSeatId(tokenId *big.Int) (uint32, error) {
	return _Contract.Contract.ObtainSeatId(&_Contract.CallOpts, tokenId)
}

// Owner is a free data retrieval call binding the contract method 0x8da5cb5b.
//
// Solidity: function owner() view returns(address)
func (_Contract *ContractCaller) Owner(opts *bind.CallOpts) (common.Address, error) {
	var out []interface{}
	err := _Contract.contract.Call(opts, &out, "owner")

	if err != nil {
		return *new(common.Address), err
	}

	out0 := *abi.ConvertType(out[0], new(common.Address)).(*common.Address)

	return out0, err

}

// Owner is a free data retrieval call binding the contract method 0x8da5cb5b.
//
// Solidity: function owner() view returns(address)
func (_Contract *ContractSession) Owner() (common.Address, error) {
	return _Contract.Contract.Owner(&_Contract.CallOpts)
}

// Owner is a free data retrieval call binding the contract method 0x8da5cb5b.
//
// Solidity: function owner() view returns(address)
func (_Contract *ContractCallerSession) Owner() (common.Address, error) {
	return _Contract.Contract.Owner(&_Contract.CallOpts)
}

// OwnerOf is a free data retrieval call binding the contract method 0x6352211e.
//
// Solidity: function ownerOf(uint256 tokenId) view returns(address)
func (_Contract *ContractCaller) OwnerOf(opts *bind.CallOpts, tokenId *big.Int) (common.Address, error) {
	var out []interface{}
	err := _Contract.contract.Call(opts, &out, "ownerOf", tokenId)

	if err != nil {
		return *new(common.Address), err
	}

	out0 := *abi.ConvertType(out[0], new(common.Address)).(*common.Address)

	return out0, err

}

// OwnerOf is a free data retrieval call binding the contract method 0x6352211e.
//
// Solidity: function ownerOf(uint256 tokenId) view returns(address)
func (_Contract *ContractSession) OwnerOf(tokenId *big.Int) (common.Address, error) {
	return _Contract.Contract.OwnerOf(&_Contract.CallOpts, tokenId)
}

// OwnerOf is a free data retrieval call binding the contract method 0x6352211e.
//
// Solidity: function ownerOf(uint256 tokenId) view returns(address)
func (_Contract *ContractCallerSession) OwnerOf(tokenId *big.Int) (common.Address, error) {
	return _Contract.Contract.OwnerOf(&_Contract.CallOpts, tokenId)
}

// SupportsInterface is a free data retrieval call binding the contract method 0x01ffc9a7.
//
// Solidity: function supportsInterface(bytes4 interfaceId) view returns(bool)
func (_Contract *ContractCaller) SupportsInterface(opts *bind.CallOpts, interfaceId [4]byte) (bool, error) {
	var out []interface{}
	err := _Contract.contract.Call(opts, &out, "supportsInterface", interfaceId)

	if err != nil {
		return *new(bool), err
	}

	out0 := *abi.ConvertType(out[0], new(bool)).(*bool)

	return out0, err

}

// SupportsInterface is a free data retrieval call binding the contract method 0x01ffc9a7.
//
// Solidity: function supportsInterface(bytes4 interfaceId) view returns(bool)
func (_Contract *ContractSession) SupportsInterface(interfaceId [4]byte) (bool, error) {
	return _Contract.Contract.SupportsInterface(&_Contract.CallOpts, interfaceId)
}

// SupportsInterface is a free data retrieval call binding the contract method 0x01ffc9a7.
//
// Solidity: function supportsInterface(bytes4 interfaceId) view returns(bool)
func (_Contract *ContractCallerSession) SupportsInterface(interfaceId [4]byte) (bool, error) {
	return _Contract.Contract.SupportsInterface(&_Contract.CallOpts, interfaceId)
}

// Symbol is a free data retrieval call binding the contract method 0x95d89b41.
//
// Solidity: function symbol() view returns(string)
func (_Contract *ContractCaller) Symbol(opts *bind.CallOpts) (string, error) {
	var out []interface{}
	err := _Contract.contract.Call(opts, &out, "symbol")

	if err != nil {
		return *new(string), err
	}

	out0 := *abi.ConvertType(out[0], new(string)).(*string)

	return out0, err

}

// Symbol is a free data retrieval call binding the contract method 0x95d89b41.
//
// Solidity: function symbol() view returns(string)
func (_Contract *ContractSession) Symbol() (string, error) {
	return _Contract.Contract.Symbol(&_Contract.CallOpts)
}

// Symbol is a free data retrieval call binding the contract method 0x95d89b41.
//
// Solidity: function symbol() view returns(string)
func (_Contract *ContractCallerSession) Symbol() (string, error) {
	return _Contract.Contract.Symbol(&_Contract.CallOpts)
}

// TicketExpirationTimeOf is a free data retrieval call binding the contract method 0x6f074cce.
//
// Solidity: function ticketExpirationTimeOf(uint32 performanceScheduleId) view returns(uint256)
func (_Contract *ContractCaller) TicketExpirationTimeOf(opts *bind.CallOpts, performanceScheduleId uint32) (*big.Int, error) {
	var out []interface{}
	err := _Contract.contract.Call(opts, &out, "ticketExpirationTimeOf", performanceScheduleId)

	if err != nil {
		return *new(*big.Int), err
	}

	out0 := *abi.ConvertType(out[0], new(*big.Int)).(**big.Int)

	return out0, err

}

// TicketExpirationTimeOf is a free data retrieval call binding the contract method 0x6f074cce.
//
// Solidity: function ticketExpirationTimeOf(uint32 performanceScheduleId) view returns(uint256)
func (_Contract *ContractSession) TicketExpirationTimeOf(performanceScheduleId uint32) (*big.Int, error) {
	return _Contract.Contract.TicketExpirationTimeOf(&_Contract.CallOpts, performanceScheduleId)
}

// TicketExpirationTimeOf is a free data retrieval call binding the contract method 0x6f074cce.
//
// Solidity: function ticketExpirationTimeOf(uint32 performanceScheduleId) view returns(uint256)
func (_Contract *ContractCallerSession) TicketExpirationTimeOf(performanceScheduleId uint32) (*big.Int, error) {
	return _Contract.Contract.TicketExpirationTimeOf(&_Contract.CallOpts, performanceScheduleId)
}

// TicketOwnerOf is a free data retrieval call binding the contract method 0xa846b84b.
//
// Solidity: function ticketOwnerOf(uint32 performanceScheduleId, uint32 seatId) view returns(address)
func (_Contract *ContractCaller) TicketOwnerOf(opts *bind.CallOpts, performanceScheduleId uint32, seatId uint32) (common.Address, error) {
	var out []interface{}
	err := _Contract.contract.Call(opts, &out, "ticketOwnerOf", performanceScheduleId, seatId)

	if err != nil {
		return *new(common.Address), err
	}

	out0 := *abi.ConvertType(out[0], new(common.Address)).(*common.Address)

	return out0, err

}

// TicketOwnerOf is a free data retrieval call binding the contract method 0xa846b84b.
//
// Solidity: function ticketOwnerOf(uint32 performanceScheduleId, uint32 seatId) view returns(address)
func (_Contract *ContractSession) TicketOwnerOf(performanceScheduleId uint32, seatId uint32) (common.Address, error) {
	return _Contract.Contract.TicketOwnerOf(&_Contract.CallOpts, performanceScheduleId, seatId)
}

// TicketOwnerOf is a free data retrieval call binding the contract method 0xa846b84b.
//
// Solidity: function ticketOwnerOf(uint32 performanceScheduleId, uint32 seatId) view returns(address)
func (_Contract *ContractCallerSession) TicketOwnerOf(performanceScheduleId uint32, seatId uint32) (common.Address, error) {
	return _Contract.Contract.TicketOwnerOf(&_Contract.CallOpts, performanceScheduleId, seatId)
}

// TokenByIndex is a free data retrieval call binding the contract method 0x4f6ccce7.
//
// Solidity: function tokenByIndex(uint256 index) view returns(uint256)
func (_Contract *ContractCaller) TokenByIndex(opts *bind.CallOpts, index *big.Int) (*big.Int, error) {
	var out []interface{}
	err := _Contract.contract.Call(opts, &out, "tokenByIndex", index)

	if err != nil {
		return *new(*big.Int), err
	}

	out0 := *abi.ConvertType(out[0], new(*big.Int)).(**big.Int)

	return out0, err

}

// TokenByIndex is a free data retrieval call binding the contract method 0x4f6ccce7.
//
// Solidity: function tokenByIndex(uint256 index) view returns(uint256)
func (_Contract *ContractSession) TokenByIndex(index *big.Int) (*big.Int, error) {
	return _Contract.Contract.TokenByIndex(&_Contract.CallOpts, index)
}

// TokenByIndex is a free data retrieval call binding the contract method 0x4f6ccce7.
//
// Solidity: function tokenByIndex(uint256 index) view returns(uint256)
func (_Contract *ContractCallerSession) TokenByIndex(index *big.Int) (*big.Int, error) {
	return _Contract.Contract.TokenByIndex(&_Contract.CallOpts, index)
}

// TokenOfOwnerByIndex is a free data retrieval call binding the contract method 0x2f745c59.
//
// Solidity: function tokenOfOwnerByIndex(address owner, uint256 index) view returns(uint256)
func (_Contract *ContractCaller) TokenOfOwnerByIndex(opts *bind.CallOpts, owner common.Address, index *big.Int) (*big.Int, error) {
	var out []interface{}
	err := _Contract.contract.Call(opts, &out, "tokenOfOwnerByIndex", owner, index)

	if err != nil {
		return *new(*big.Int), err
	}

	out0 := *abi.ConvertType(out[0], new(*big.Int)).(**big.Int)

	return out0, err

}

// TokenOfOwnerByIndex is a free data retrieval call binding the contract method 0x2f745c59.
//
// Solidity: function tokenOfOwnerByIndex(address owner, uint256 index) view returns(uint256)
func (_Contract *ContractSession) TokenOfOwnerByIndex(owner common.Address, index *big.Int) (*big.Int, error) {
	return _Contract.Contract.TokenOfOwnerByIndex(&_Contract.CallOpts, owner, index)
}

// TokenOfOwnerByIndex is a free data retrieval call binding the contract method 0x2f745c59.
//
// Solidity: function tokenOfOwnerByIndex(address owner, uint256 index) view returns(uint256)
func (_Contract *ContractCallerSession) TokenOfOwnerByIndex(owner common.Address, index *big.Int) (*big.Int, error) {
	return _Contract.Contract.TokenOfOwnerByIndex(&_Contract.CallOpts, owner, index)
}

// TokenURI is a free data retrieval call binding the contract method 0xc87b56dd.
//
// Solidity: function tokenURI(uint256 tokenId) view returns(string)
func (_Contract *ContractCaller) TokenURI(opts *bind.CallOpts, tokenId *big.Int) (string, error) {
	var out []interface{}
	err := _Contract.contract.Call(opts, &out, "tokenURI", tokenId)

	if err != nil {
		return *new(string), err
	}

	out0 := *abi.ConvertType(out[0], new(string)).(*string)

	return out0, err

}

// TokenURI is a free data retrieval call binding the contract method 0xc87b56dd.
//
// Solidity: function tokenURI(uint256 tokenId) view returns(string)
func (_Contract *ContractSession) TokenURI(tokenId *big.Int) (string, error) {
	return _Contract.Contract.TokenURI(&_Contract.CallOpts, tokenId)
}

// TokenURI is a free data retrieval call binding the contract method 0xc87b56dd.
//
// Solidity: function tokenURI(uint256 tokenId) view returns(string)
func (_Contract *ContractCallerSession) TokenURI(tokenId *big.Int) (string, error) {
	return _Contract.Contract.TokenURI(&_Contract.CallOpts, tokenId)
}

// TotalSupply is a free data retrieval call binding the contract method 0x18160ddd.
//
// Solidity: function totalSupply() view returns(uint256)
func (_Contract *ContractCaller) TotalSupply(opts *bind.CallOpts) (*big.Int, error) {
	var out []interface{}
	err := _Contract.contract.Call(opts, &out, "totalSupply")

	if err != nil {
		return *new(*big.Int), err
	}

	out0 := *abi.ConvertType(out[0], new(*big.Int)).(**big.Int)

	return out0, err

}

// TotalSupply is a free data retrieval call binding the contract method 0x18160ddd.
//
// Solidity: function totalSupply() view returns(uint256)
func (_Contract *ContractSession) TotalSupply() (*big.Int, error) {
	return _Contract.Contract.TotalSupply(&_Contract.CallOpts)
}

// TotalSupply is a free data retrieval call binding the contract method 0x18160ddd.
//
// Solidity: function totalSupply() view returns(uint256)
func (_Contract *ContractCallerSession) TotalSupply() (*big.Int, error) {
	return _Contract.Contract.TotalSupply(&_Contract.CallOpts)
}

// Approve is a paid mutator transaction binding the contract method 0x095ea7b3.
//
// Solidity: function approve(address to, uint256 tokenId) returns()
func (_Contract *ContractTransactor) Approve(opts *bind.TransactOpts, to common.Address, tokenId *big.Int) (*types.Transaction, error) {
	return _Contract.contract.Transact(opts, "approve", to, tokenId)
}

// Approve is a paid mutator transaction binding the contract method 0x095ea7b3.
//
// Solidity: function approve(address to, uint256 tokenId) returns()
func (_Contract *ContractSession) Approve(to common.Address, tokenId *big.Int) (*types.Transaction, error) {
	return _Contract.Contract.Approve(&_Contract.TransactOpts, to, tokenId)
}

// Approve is a paid mutator transaction binding the contract method 0x095ea7b3.
//
// Solidity: function approve(address to, uint256 tokenId) returns()
func (_Contract *ContractTransactorSession) Approve(to common.Address, tokenId *big.Int) (*types.Transaction, error) {
	return _Contract.Contract.Approve(&_Contract.TransactOpts, to, tokenId)
}

// MarkTicketAsUsed is a paid mutator transaction binding the contract method 0x5fdac1a3.
//
// Solidity: function markTicketAsUsed(uint32 performanceScheduleId, uint32 seatId) returns()
func (_Contract *ContractTransactor) MarkTicketAsUsed(opts *bind.TransactOpts, performanceScheduleId uint32, seatId uint32) (*types.Transaction, error) {
	return _Contract.contract.Transact(opts, "markTicketAsUsed", performanceScheduleId, seatId)
}

// MarkTicketAsUsed is a paid mutator transaction binding the contract method 0x5fdac1a3.
//
// Solidity: function markTicketAsUsed(uint32 performanceScheduleId, uint32 seatId) returns()
func (_Contract *ContractSession) MarkTicketAsUsed(performanceScheduleId uint32, seatId uint32) (*types.Transaction, error) {
	return _Contract.Contract.MarkTicketAsUsed(&_Contract.TransactOpts, performanceScheduleId, seatId)
}

// MarkTicketAsUsed is a paid mutator transaction binding the contract method 0x5fdac1a3.
//
// Solidity: function markTicketAsUsed(uint32 performanceScheduleId, uint32 seatId) returns()
func (_Contract *ContractTransactorSession) MarkTicketAsUsed(performanceScheduleId uint32, seatId uint32) (*types.Transaction, error) {
	return _Contract.Contract.MarkTicketAsUsed(&_Contract.TransactOpts, performanceScheduleId, seatId)
}

// MintTicket is a paid mutator transaction binding the contract method 0x8e0fdff8.
//
// Solidity: function mintTicket(address receipent, uint32 performanceScheduleId, uint32 seatId, string speicalUri) returns()
func (_Contract *ContractTransactor) MintTicket(opts *bind.TransactOpts, receipent common.Address, performanceScheduleId uint32, seatId uint32, speicalUri string) (*types.Transaction, error) {
	return _Contract.contract.Transact(opts, "mintTicket", receipent, performanceScheduleId, seatId, speicalUri)
}

// MintTicket is a paid mutator transaction binding the contract method 0x8e0fdff8.
//
// Solidity: function mintTicket(address receipent, uint32 performanceScheduleId, uint32 seatId, string speicalUri) returns()
func (_Contract *ContractSession) MintTicket(receipent common.Address, performanceScheduleId uint32, seatId uint32, speicalUri string) (*types.Transaction, error) {
	return _Contract.Contract.MintTicket(&_Contract.TransactOpts, receipent, performanceScheduleId, seatId, speicalUri)
}

// MintTicket is a paid mutator transaction binding the contract method 0x8e0fdff8.
//
// Solidity: function mintTicket(address receipent, uint32 performanceScheduleId, uint32 seatId, string speicalUri) returns()
func (_Contract *ContractTransactorSession) MintTicket(receipent common.Address, performanceScheduleId uint32, seatId uint32, speicalUri string) (*types.Transaction, error) {
	return _Contract.Contract.MintTicket(&_Contract.TransactOpts, receipent, performanceScheduleId, seatId, speicalUri)
}

// RenounceOwnership is a paid mutator transaction binding the contract method 0x715018a6.
//
// Solidity: function renounceOwnership() returns()
func (_Contract *ContractTransactor) RenounceOwnership(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _Contract.contract.Transact(opts, "renounceOwnership")
}

// RenounceOwnership is a paid mutator transaction binding the contract method 0x715018a6.
//
// Solidity: function renounceOwnership() returns()
func (_Contract *ContractSession) RenounceOwnership() (*types.Transaction, error) {
	return _Contract.Contract.RenounceOwnership(&_Contract.TransactOpts)
}

// RenounceOwnership is a paid mutator transaction binding the contract method 0x715018a6.
//
// Solidity: function renounceOwnership() returns()
func (_Contract *ContractTransactorSession) RenounceOwnership() (*types.Transaction, error) {
	return _Contract.Contract.RenounceOwnership(&_Contract.TransactOpts)
}

// SafeTransferFrom is a paid mutator transaction binding the contract method 0x42842e0e.
//
// Solidity: function safeTransferFrom(address from, address to, uint256 tokenId) returns()
func (_Contract *ContractTransactor) SafeTransferFrom(opts *bind.TransactOpts, from common.Address, to common.Address, tokenId *big.Int) (*types.Transaction, error) {
	return _Contract.contract.Transact(opts, "safeTransferFrom", from, to, tokenId)
}

// SafeTransferFrom is a paid mutator transaction binding the contract method 0x42842e0e.
//
// Solidity: function safeTransferFrom(address from, address to, uint256 tokenId) returns()
func (_Contract *ContractSession) SafeTransferFrom(from common.Address, to common.Address, tokenId *big.Int) (*types.Transaction, error) {
	return _Contract.Contract.SafeTransferFrom(&_Contract.TransactOpts, from, to, tokenId)
}

// SafeTransferFrom is a paid mutator transaction binding the contract method 0x42842e0e.
//
// Solidity: function safeTransferFrom(address from, address to, uint256 tokenId) returns()
func (_Contract *ContractTransactorSession) SafeTransferFrom(from common.Address, to common.Address, tokenId *big.Int) (*types.Transaction, error) {
	return _Contract.Contract.SafeTransferFrom(&_Contract.TransactOpts, from, to, tokenId)
}

// SafeTransferFrom0 is a paid mutator transaction binding the contract method 0xb88d4fde.
//
// Solidity: function safeTransferFrom(address from, address to, uint256 tokenId, bytes data) returns()
func (_Contract *ContractTransactor) SafeTransferFrom0(opts *bind.TransactOpts, from common.Address, to common.Address, tokenId *big.Int, data []byte) (*types.Transaction, error) {
	return _Contract.contract.Transact(opts, "safeTransferFrom0", from, to, tokenId, data)
}

// SafeTransferFrom0 is a paid mutator transaction binding the contract method 0xb88d4fde.
//
// Solidity: function safeTransferFrom(address from, address to, uint256 tokenId, bytes data) returns()
func (_Contract *ContractSession) SafeTransferFrom0(from common.Address, to common.Address, tokenId *big.Int, data []byte) (*types.Transaction, error) {
	return _Contract.Contract.SafeTransferFrom0(&_Contract.TransactOpts, from, to, tokenId, data)
}

// SafeTransferFrom0 is a paid mutator transaction binding the contract method 0xb88d4fde.
//
// Solidity: function safeTransferFrom(address from, address to, uint256 tokenId, bytes data) returns()
func (_Contract *ContractTransactorSession) SafeTransferFrom0(from common.Address, to common.Address, tokenId *big.Int, data []byte) (*types.Transaction, error) {
	return _Contract.Contract.SafeTransferFrom0(&_Contract.TransactOpts, from, to, tokenId, data)
}

// SchedulePerformance is a paid mutator transaction binding the contract method 0x4ee07f4f.
//
// Solidity: function schedulePerformance(uint32 performanceScheduleId, uint256 ticketExpirationTime) returns()
func (_Contract *ContractTransactor) SchedulePerformance(opts *bind.TransactOpts, performanceScheduleId uint32, ticketExpirationTime *big.Int) (*types.Transaction, error) {
	return _Contract.contract.Transact(opts, "schedulePerformance", performanceScheduleId, ticketExpirationTime)
}

// SchedulePerformance is a paid mutator transaction binding the contract method 0x4ee07f4f.
//
// Solidity: function schedulePerformance(uint32 performanceScheduleId, uint256 ticketExpirationTime) returns()
func (_Contract *ContractSession) SchedulePerformance(performanceScheduleId uint32, ticketExpirationTime *big.Int) (*types.Transaction, error) {
	return _Contract.Contract.SchedulePerformance(&_Contract.TransactOpts, performanceScheduleId, ticketExpirationTime)
}

// SchedulePerformance is a paid mutator transaction binding the contract method 0x4ee07f4f.
//
// Solidity: function schedulePerformance(uint32 performanceScheduleId, uint256 ticketExpirationTime) returns()
func (_Contract *ContractTransactorSession) SchedulePerformance(performanceScheduleId uint32, ticketExpirationTime *big.Int) (*types.Transaction, error) {
	return _Contract.Contract.SchedulePerformance(&_Contract.TransactOpts, performanceScheduleId, ticketExpirationTime)
}

// SetApprovalForAll is a paid mutator transaction binding the contract method 0xa22cb465.
//
// Solidity: function setApprovalForAll(address operator, bool approved) returns()
func (_Contract *ContractTransactor) SetApprovalForAll(opts *bind.TransactOpts, operator common.Address, approved bool) (*types.Transaction, error) {
	return _Contract.contract.Transact(opts, "setApprovalForAll", operator, approved)
}

// SetApprovalForAll is a paid mutator transaction binding the contract method 0xa22cb465.
//
// Solidity: function setApprovalForAll(address operator, bool approved) returns()
func (_Contract *ContractSession) SetApprovalForAll(operator common.Address, approved bool) (*types.Transaction, error) {
	return _Contract.Contract.SetApprovalForAll(&_Contract.TransactOpts, operator, approved)
}

// SetApprovalForAll is a paid mutator transaction binding the contract method 0xa22cb465.
//
// Solidity: function setApprovalForAll(address operator, bool approved) returns()
func (_Contract *ContractTransactorSession) SetApprovalForAll(operator common.Address, approved bool) (*types.Transaction, error) {
	return _Contract.Contract.SetApprovalForAll(&_Contract.TransactOpts, operator, approved)
}

// SetTicketCoverUri is a paid mutator transaction binding the contract method 0xc8d48658.
//
// Solidity: function setTicketCoverUri(uint32 performanceScheduleId, string newTicketCoverUri) returns()
func (_Contract *ContractTransactor) SetTicketCoverUri(opts *bind.TransactOpts, performanceScheduleId uint32, newTicketCoverUri string) (*types.Transaction, error) {
	return _Contract.contract.Transact(opts, "setTicketCoverUri", performanceScheduleId, newTicketCoverUri)
}

// SetTicketCoverUri is a paid mutator transaction binding the contract method 0xc8d48658.
//
// Solidity: function setTicketCoverUri(uint32 performanceScheduleId, string newTicketCoverUri) returns()
func (_Contract *ContractSession) SetTicketCoverUri(performanceScheduleId uint32, newTicketCoverUri string) (*types.Transaction, error) {
	return _Contract.Contract.SetTicketCoverUri(&_Contract.TransactOpts, performanceScheduleId, newTicketCoverUri)
}

// SetTicketCoverUri is a paid mutator transaction binding the contract method 0xc8d48658.
//
// Solidity: function setTicketCoverUri(uint32 performanceScheduleId, string newTicketCoverUri) returns()
func (_Contract *ContractTransactorSession) SetTicketCoverUri(performanceScheduleId uint32, newTicketCoverUri string) (*types.Transaction, error) {
	return _Contract.Contract.SetTicketCoverUri(&_Contract.TransactOpts, performanceScheduleId, newTicketCoverUri)
}

// TransferFrom is a paid mutator transaction binding the contract method 0x23b872dd.
//
// Solidity: function transferFrom(address from, address to, uint256 tokenId) returns()
func (_Contract *ContractTransactor) TransferFrom(opts *bind.TransactOpts, from common.Address, to common.Address, tokenId *big.Int) (*types.Transaction, error) {
	return _Contract.contract.Transact(opts, "transferFrom", from, to, tokenId)
}

// TransferFrom is a paid mutator transaction binding the contract method 0x23b872dd.
//
// Solidity: function transferFrom(address from, address to, uint256 tokenId) returns()
func (_Contract *ContractSession) TransferFrom(from common.Address, to common.Address, tokenId *big.Int) (*types.Transaction, error) {
	return _Contract.Contract.TransferFrom(&_Contract.TransactOpts, from, to, tokenId)
}

// TransferFrom is a paid mutator transaction binding the contract method 0x23b872dd.
//
// Solidity: function transferFrom(address from, address to, uint256 tokenId) returns()
func (_Contract *ContractTransactorSession) TransferFrom(from common.Address, to common.Address, tokenId *big.Int) (*types.Transaction, error) {
	return _Contract.Contract.TransferFrom(&_Contract.TransactOpts, from, to, tokenId)
}

// TransferOwnership is a paid mutator transaction binding the contract method 0xf2fde38b.
//
// Solidity: function transferOwnership(address newOwner) returns()
func (_Contract *ContractTransactor) TransferOwnership(opts *bind.TransactOpts, newOwner common.Address) (*types.Transaction, error) {
	return _Contract.contract.Transact(opts, "transferOwnership", newOwner)
}

// TransferOwnership is a paid mutator transaction binding the contract method 0xf2fde38b.
//
// Solidity: function transferOwnership(address newOwner) returns()
func (_Contract *ContractSession) TransferOwnership(newOwner common.Address) (*types.Transaction, error) {
	return _Contract.Contract.TransferOwnership(&_Contract.TransactOpts, newOwner)
}

// TransferOwnership is a paid mutator transaction binding the contract method 0xf2fde38b.
//
// Solidity: function transferOwnership(address newOwner) returns()
func (_Contract *ContractTransactorSession) TransferOwnership(newOwner common.Address) (*types.Transaction, error) {
	return _Contract.Contract.TransferOwnership(&_Contract.TransactOpts, newOwner)
}

// ContractApprovalIterator is returned from FilterApproval and is used to iterate over the raw logs and unpacked data for Approval events raised by the Contract contract.
type ContractApprovalIterator struct {
	Event *ContractApproval // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *ContractApprovalIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(ContractApproval)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(ContractApproval)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *ContractApprovalIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *ContractApprovalIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// ContractApproval represents a Approval event raised by the Contract contract.
type ContractApproval struct {
	Owner    common.Address
	Approved common.Address
	TokenId  *big.Int
	Raw      types.Log // Blockchain specific contextual infos
}

// FilterApproval is a free log retrieval operation binding the contract event 0x8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b925.
//
// Solidity: event Approval(address indexed owner, address indexed approved, uint256 indexed tokenId)
func (_Contract *ContractFilterer) FilterApproval(opts *bind.FilterOpts, owner []common.Address, approved []common.Address, tokenId []*big.Int) (*ContractApprovalIterator, error) {

	var ownerRule []interface{}
	for _, ownerItem := range owner {
		ownerRule = append(ownerRule, ownerItem)
	}
	var approvedRule []interface{}
	for _, approvedItem := range approved {
		approvedRule = append(approvedRule, approvedItem)
	}
	var tokenIdRule []interface{}
	for _, tokenIdItem := range tokenId {
		tokenIdRule = append(tokenIdRule, tokenIdItem)
	}

	logs, sub, err := _Contract.contract.FilterLogs(opts, "Approval", ownerRule, approvedRule, tokenIdRule)
	if err != nil {
		return nil, err
	}
	return &ContractApprovalIterator{contract: _Contract.contract, event: "Approval", logs: logs, sub: sub}, nil
}

// WatchApproval is a free log subscription operation binding the contract event 0x8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b925.
//
// Solidity: event Approval(address indexed owner, address indexed approved, uint256 indexed tokenId)
func (_Contract *ContractFilterer) WatchApproval(opts *bind.WatchOpts, sink chan<- *ContractApproval, owner []common.Address, approved []common.Address, tokenId []*big.Int) (event.Subscription, error) {

	var ownerRule []interface{}
	for _, ownerItem := range owner {
		ownerRule = append(ownerRule, ownerItem)
	}
	var approvedRule []interface{}
	for _, approvedItem := range approved {
		approvedRule = append(approvedRule, approvedItem)
	}
	var tokenIdRule []interface{}
	for _, tokenIdItem := range tokenId {
		tokenIdRule = append(tokenIdRule, tokenIdItem)
	}

	logs, sub, err := _Contract.contract.WatchLogs(opts, "Approval", ownerRule, approvedRule, tokenIdRule)
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(ContractApproval)
				if err := _Contract.contract.UnpackLog(event, "Approval", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseApproval is a log parse operation binding the contract event 0x8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b925.
//
// Solidity: event Approval(address indexed owner, address indexed approved, uint256 indexed tokenId)
func (_Contract *ContractFilterer) ParseApproval(log types.Log) (*ContractApproval, error) {
	event := new(ContractApproval)
	if err := _Contract.contract.UnpackLog(event, "Approval", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// ContractApprovalForAllIterator is returned from FilterApprovalForAll and is used to iterate over the raw logs and unpacked data for ApprovalForAll events raised by the Contract contract.
type ContractApprovalForAllIterator struct {
	Event *ContractApprovalForAll // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *ContractApprovalForAllIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(ContractApprovalForAll)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(ContractApprovalForAll)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *ContractApprovalForAllIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *ContractApprovalForAllIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// ContractApprovalForAll represents a ApprovalForAll event raised by the Contract contract.
type ContractApprovalForAll struct {
	Owner    common.Address
	Operator common.Address
	Approved bool
	Raw      types.Log // Blockchain specific contextual infos
}

// FilterApprovalForAll is a free log retrieval operation binding the contract event 0x17307eab39ab6107e8899845ad3d59bd9653f200f220920489ca2b5937696c31.
//
// Solidity: event ApprovalForAll(address indexed owner, address indexed operator, bool approved)
func (_Contract *ContractFilterer) FilterApprovalForAll(opts *bind.FilterOpts, owner []common.Address, operator []common.Address) (*ContractApprovalForAllIterator, error) {

	var ownerRule []interface{}
	for _, ownerItem := range owner {
		ownerRule = append(ownerRule, ownerItem)
	}
	var operatorRule []interface{}
	for _, operatorItem := range operator {
		operatorRule = append(operatorRule, operatorItem)
	}

	logs, sub, err := _Contract.contract.FilterLogs(opts, "ApprovalForAll", ownerRule, operatorRule)
	if err != nil {
		return nil, err
	}
	return &ContractApprovalForAllIterator{contract: _Contract.contract, event: "ApprovalForAll", logs: logs, sub: sub}, nil
}

// WatchApprovalForAll is a free log subscription operation binding the contract event 0x17307eab39ab6107e8899845ad3d59bd9653f200f220920489ca2b5937696c31.
//
// Solidity: event ApprovalForAll(address indexed owner, address indexed operator, bool approved)
func (_Contract *ContractFilterer) WatchApprovalForAll(opts *bind.WatchOpts, sink chan<- *ContractApprovalForAll, owner []common.Address, operator []common.Address) (event.Subscription, error) {

	var ownerRule []interface{}
	for _, ownerItem := range owner {
		ownerRule = append(ownerRule, ownerItem)
	}
	var operatorRule []interface{}
	for _, operatorItem := range operator {
		operatorRule = append(operatorRule, operatorItem)
	}

	logs, sub, err := _Contract.contract.WatchLogs(opts, "ApprovalForAll", ownerRule, operatorRule)
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(ContractApprovalForAll)
				if err := _Contract.contract.UnpackLog(event, "ApprovalForAll", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseApprovalForAll is a log parse operation binding the contract event 0x17307eab39ab6107e8899845ad3d59bd9653f200f220920489ca2b5937696c31.
//
// Solidity: event ApprovalForAll(address indexed owner, address indexed operator, bool approved)
func (_Contract *ContractFilterer) ParseApprovalForAll(log types.Log) (*ContractApprovalForAll, error) {
	event := new(ContractApprovalForAll)
	if err := _Contract.contract.UnpackLog(event, "ApprovalForAll", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// ContractOwnershipTransferredIterator is returned from FilterOwnershipTransferred and is used to iterate over the raw logs and unpacked data for OwnershipTransferred events raised by the Contract contract.
type ContractOwnershipTransferredIterator struct {
	Event *ContractOwnershipTransferred // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *ContractOwnershipTransferredIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(ContractOwnershipTransferred)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(ContractOwnershipTransferred)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *ContractOwnershipTransferredIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *ContractOwnershipTransferredIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// ContractOwnershipTransferred represents a OwnershipTransferred event raised by the Contract contract.
type ContractOwnershipTransferred struct {
	PreviousOwner common.Address
	NewOwner      common.Address
	Raw           types.Log // Blockchain specific contextual infos
}

// FilterOwnershipTransferred is a free log retrieval operation binding the contract event 0x8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0.
//
// Solidity: event OwnershipTransferred(address indexed previousOwner, address indexed newOwner)
func (_Contract *ContractFilterer) FilterOwnershipTransferred(opts *bind.FilterOpts, previousOwner []common.Address, newOwner []common.Address) (*ContractOwnershipTransferredIterator, error) {

	var previousOwnerRule []interface{}
	for _, previousOwnerItem := range previousOwner {
		previousOwnerRule = append(previousOwnerRule, previousOwnerItem)
	}
	var newOwnerRule []interface{}
	for _, newOwnerItem := range newOwner {
		newOwnerRule = append(newOwnerRule, newOwnerItem)
	}

	logs, sub, err := _Contract.contract.FilterLogs(opts, "OwnershipTransferred", previousOwnerRule, newOwnerRule)
	if err != nil {
		return nil, err
	}
	return &ContractOwnershipTransferredIterator{contract: _Contract.contract, event: "OwnershipTransferred", logs: logs, sub: sub}, nil
}

// WatchOwnershipTransferred is a free log subscription operation binding the contract event 0x8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0.
//
// Solidity: event OwnershipTransferred(address indexed previousOwner, address indexed newOwner)
func (_Contract *ContractFilterer) WatchOwnershipTransferred(opts *bind.WatchOpts, sink chan<- *ContractOwnershipTransferred, previousOwner []common.Address, newOwner []common.Address) (event.Subscription, error) {

	var previousOwnerRule []interface{}
	for _, previousOwnerItem := range previousOwner {
		previousOwnerRule = append(previousOwnerRule, previousOwnerItem)
	}
	var newOwnerRule []interface{}
	for _, newOwnerItem := range newOwner {
		newOwnerRule = append(newOwnerRule, newOwnerItem)
	}

	logs, sub, err := _Contract.contract.WatchLogs(opts, "OwnershipTransferred", previousOwnerRule, newOwnerRule)
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(ContractOwnershipTransferred)
				if err := _Contract.contract.UnpackLog(event, "OwnershipTransferred", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseOwnershipTransferred is a log parse operation binding the contract event 0x8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0.
//
// Solidity: event OwnershipTransferred(address indexed previousOwner, address indexed newOwner)
func (_Contract *ContractFilterer) ParseOwnershipTransferred(log types.Log) (*ContractOwnershipTransferred, error) {
	event := new(ContractOwnershipTransferred)
	if err := _Contract.contract.UnpackLog(event, "OwnershipTransferred", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// ContractTransferIterator is returned from FilterTransfer and is used to iterate over the raw logs and unpacked data for Transfer events raised by the Contract contract.
type ContractTransferIterator struct {
	Event *ContractTransfer // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *ContractTransferIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(ContractTransfer)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(ContractTransfer)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *ContractTransferIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *ContractTransferIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// ContractTransfer represents a Transfer event raised by the Contract contract.
type ContractTransfer struct {
	From    common.Address
	To      common.Address
	TokenId *big.Int
	Raw     types.Log // Blockchain specific contextual infos
}

// FilterTransfer is a free log retrieval operation binding the contract event 0xddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef.
//
// Solidity: event Transfer(address indexed from, address indexed to, uint256 indexed tokenId)
func (_Contract *ContractFilterer) FilterTransfer(opts *bind.FilterOpts, from []common.Address, to []common.Address, tokenId []*big.Int) (*ContractTransferIterator, error) {

	var fromRule []interface{}
	for _, fromItem := range from {
		fromRule = append(fromRule, fromItem)
	}
	var toRule []interface{}
	for _, toItem := range to {
		toRule = append(toRule, toItem)
	}
	var tokenIdRule []interface{}
	for _, tokenIdItem := range tokenId {
		tokenIdRule = append(tokenIdRule, tokenIdItem)
	}

	logs, sub, err := _Contract.contract.FilterLogs(opts, "Transfer", fromRule, toRule, tokenIdRule)
	if err != nil {
		return nil, err
	}
	return &ContractTransferIterator{contract: _Contract.contract, event: "Transfer", logs: logs, sub: sub}, nil
}

// WatchTransfer is a free log subscription operation binding the contract event 0xddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef.
//
// Solidity: event Transfer(address indexed from, address indexed to, uint256 indexed tokenId)
func (_Contract *ContractFilterer) WatchTransfer(opts *bind.WatchOpts, sink chan<- *ContractTransfer, from []common.Address, to []common.Address, tokenId []*big.Int) (event.Subscription, error) {

	var fromRule []interface{}
	for _, fromItem := range from {
		fromRule = append(fromRule, fromItem)
	}
	var toRule []interface{}
	for _, toItem := range to {
		toRule = append(toRule, toItem)
	}
	var tokenIdRule []interface{}
	for _, tokenIdItem := range tokenId {
		tokenIdRule = append(tokenIdRule, tokenIdItem)
	}

	logs, sub, err := _Contract.contract.WatchLogs(opts, "Transfer", fromRule, toRule, tokenIdRule)
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(ContractTransfer)
				if err := _Contract.contract.UnpackLog(event, "Transfer", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseTransfer is a log parse operation binding the contract event 0xddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef.
//
// Solidity: event Transfer(address indexed from, address indexed to, uint256 indexed tokenId)
func (_Contract *ContractFilterer) ParseTransfer(log types.Log) (*ContractTransfer, error) {
	event := new(ContractTransfer)
	if err := _Contract.contract.UnpackLog(event, "Transfer", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}
